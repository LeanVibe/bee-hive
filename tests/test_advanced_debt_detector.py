#!/usr/bin/env python3
"""
Test script for the Advanced Technical Debt Detector.

Tests ML-powered pattern detection, anomaly detection, and intelligent
debt classification components.
"""

import asyncio
import sys
import os
import tempfile
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app.project_index.advanced_debt_detector import (
    AdvancedDebtDetector, 
    DebtPatternType, 
    AdvancedDebtPattern,
    DebtCluster,
    DebtTrend
)
from app.project_index.debt_analyzer import TechnicalDebtAnalyzer, DebtAnalysisResult, DebtItem, DebtCategory, DebtSeverity
from app.project_index.ml_analyzer import MLAnalyzer
from app.project_index.historical_analyzer import HistoricalAnalyzer
from app.models.project_index import ProjectIndex, FileEntry
from unittest.mock import Mock, AsyncMock
import numpy as np


def create_test_code_files():
    """Create temporary test files with various debt patterns."""
    test_files = {}
    
    # God class example
    test_files["god_class.py"] = '''
class MassiveGodClass:
    """A class that does everything - classic god class antipattern."""
    
    def __init__(self):
        self.users = []
        self.products = []
        self.orders = []
        self.payments = []
        self.emails = []
    
    def create_user(self): pass
    def update_user(self): pass
    def delete_user(self): pass
    def validate_user(self): pass
    def hash_password(self): pass
    def send_welcome_email(self): pass
    
    def create_product(self): pass
    def update_product(self): pass
    def delete_product(self): pass
    def validate_product(self): pass
    def calculate_price(self): pass
    def apply_discount(self): pass
    
    def create_order(self): pass
    def update_order(self): pass
    def process_payment(self): pass
    def send_confirmation(self): pass
    def track_shipment(self): pass
    def handle_returns(self): pass
    
    def generate_reports(self): pass
    def export_data(self): pass
    def import_data(self): pass
    def backup_database(self): pass
'''
    
    # N+1 query pattern
    test_files["n_plus_one.py"] = '''
def get_user_posts_bad(users):
    """Bad example with N+1 query pattern."""
    result = []
    for user in users:
        # This creates N+1 queries - very bad!
        posts = query("SELECT * FROM posts WHERE user_id = %s", user.id)
        user_data = {
            'user': user,
            'posts': posts
        }
        result.append(user_data)
    return result

def process_orders_inefficient():
    """Another N+1 pattern example."""
    orders = get_all_orders()
    for order in orders:
        customer = fetch_customer(order.customer_id)  # Database query in loop!
        order.customer_name = customer.name
'''
    
    # Security vulnerabilities
    test_files["security_issues.py"] = '''
import os
import subprocess

def dangerous_sql_query(user_input):
    """SQL injection vulnerability."""
    query = "SELECT * FROM users WHERE name = '%s'" % user_input  # BAD!
    return execute(query)

def command_injection_risk(filename):
    """Command injection vulnerability."""
    return os.system("cat " + filename)  # VERY BAD!

def eval_danger(user_code):
    """Code injection via eval."""
    return eval(user_code)  # EXTREMELY BAD!

# Hardcoded secrets
API_KEY = "sk-1234567890abcdef"
PASSWORD = "admin123"
DATABASE_URL = "postgresql://user:secret123@localhost/db"
'''
    
    # Inefficient algorithm
    test_files["inefficient_algo.py"] = '''
def bubble_sort_bad(arr):
    """Inefficient O(n¬≤) sorting algorithm."""
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            for k in range(len(arr)):  # Unnecessary third nested loop!
                if arr[j] > arr[j+1]:
                    arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

def string_concatenation_hell(items):
    """Inefficient string building."""
    result = ""
    result += "Starting: "
    result += str(len(items))
    result += " items to process: "
    result += ", ".join(items)
    result += " - processing complete"
    result += " at timestamp: "
    result += str(time.now())
    return result
'''
    
    # Anemic model
    test_files["anemic_model.py"] = '''
class UserData:
    """Anemic model - just data, no behavior."""
    def __init__(self):
        self.user_id = None
        self.username = None
        self.email = None
        self.first_name = None
        self.last_name = None
        self.phone = None
        self.address = None
        self.city = None
        self.state = None
        self.zip_code = None
        self.created_at = None
        self.updated_at = None
    
    def get_user_id(self):
        return self.user_id
    
    def set_user_id(self, user_id):
        self.user_id = user_id
        
# All business logic lives elsewhere in service classes
class UserService:
    def validate_user(self, user_data): pass
    def calculate_age(self, user_data): pass
    def format_address(self, user_data): pass
    def send_welcome_email(self, user_data): pass
'''
    
    return test_files


async def test_advanced_pattern_detection():
    """Test advanced debt pattern detection."""
    print("üß† Testing Advanced Pattern Detection...")
    
    try:
        # Create mock components
        base_analyzer = Mock(spec=TechnicalDebtAnalyzer)
        ml_analyzer = Mock(spec=MLAnalyzer)
        historical_analyzer = Mock(spec=HistoricalAnalyzer)
        
        # Setup mock ML analyzer
        ml_analyzer.generate_embeddings = AsyncMock(return_value=np.random.rand(5, 100))
        
        detector = AdvancedDebtDetector(base_analyzer, ml_analyzer, historical_analyzer)
        
        # Create test files
        test_files = create_test_code_files()
        
        # Create temporary files and FileEntry objects
        file_entries = []
        with tempfile.TemporaryDirectory() as temp_dir:
            for filename, content in test_files.items():
                file_path = os.path.join(temp_dir, filename)
                with open(file_path, 'w') as f:
                    f.write(content)
                
                # Create mock FileEntry
                file_entry = Mock(spec=FileEntry)
                file_entry.id = len(file_entries)
                file_entry.file_path = file_path
                file_entry.file_name = filename
                file_entry.is_binary = False
                file_entry.language = "python"
                
                file_entries.append(file_entry)
            
            # Create mock project
            project = Mock(spec=ProjectIndex)
            project.id = "test-project"
            project.file_entries = file_entries
            project.dependency_relationships = []
            
            # Create mock base analysis result
            base_analysis = DebtAnalysisResult(
                project_id="test-project",
                total_debt_score=0.7,
                debt_items=[
                    DebtItem(
                        project_id="test-project",
                        file_id="0",
                        debt_type="high_complexity",
                        category=DebtCategory.COMPLEXITY,
                        severity=DebtSeverity.HIGH
                    )
                ],
                category_scores={"complexity": 0.8},
                file_count=len(file_entries),
                lines_of_code=500,
                analysis_duration=2.5,
                recommendations=[]
            )
            
            # Test advanced pattern detection
            patterns = await detector.analyze_advanced_debt_patterns(project, base_analysis)
            
            print(f"‚úÖ Found {len(patterns)} advanced debt patterns")
            
            # Validate pattern types found
            pattern_types = {p.pattern_type for p in patterns}
            expected_types = {
                DebtPatternType.ARCHITECTURAL,
                DebtPatternType.PERFORMANCE_HOTSPOT,
                DebtPatternType.SECURITY_VULNERABILITY,
                DebtPatternType.DESIGN_ANTIPATTERN
            }
            
            found_types = pattern_types.intersection(expected_types)
            print(f"‚úÖ Detected pattern types: {[t.value for t in found_types]}")
            
            # Test specific patterns
            god_class_found = any(p.pattern_name == "god_class" for p in patterns)
            security_found = any(p.pattern_type == DebtPatternType.SECURITY_VULNERABILITY for p in patterns)
            performance_found = any(p.pattern_type == DebtPatternType.PERFORMANCE_HOTSPOT for p in patterns)
            
            print(f"‚úÖ God class detected: {god_class_found}")
            print(f"‚úÖ Security issues detected: {security_found}")
            print(f"‚úÖ Performance issues detected: {performance_found}")
            
            # Test pattern confidence scores
            high_confidence = [p for p in patterns if p.confidence > 0.8]
            print(f"‚úÖ High confidence patterns: {len(high_confidence)}")
            
            return len(patterns) > 0
            
    except Exception as e:
        print(f"‚ùå Error in advanced pattern detection: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_debt_clustering():
    """Test debt item clustering functionality."""
    print("\nüìä Testing Debt Clustering...")
    
    try:
        # Create mock components
        base_analyzer = Mock(spec=TechnicalDebtAnalyzer)
        ml_analyzer = Mock(spec=MLAnalyzer)
        historical_analyzer = Mock(spec=HistoricalAnalyzer)
        
        detector = AdvancedDebtDetector(base_analyzer, ml_analyzer, historical_analyzer)
        
        # Create test debt items with similar characteristics
        debt_items = [
            DebtItem(
                project_id="test",
                file_id="1",
                debt_type="complexity",
                category=DebtCategory.COMPLEXITY,
                severity=DebtSeverity.HIGH,
                debt_score=0.8,
                confidence_score=0.9,
                estimated_effort_hours=4
            ),
            DebtItem(
                project_id="test",
                file_id="2", 
                debt_type="complexity",
                category=DebtCategory.COMPLEXITY,
                severity=DebtSeverity.HIGH,
                debt_score=0.7,
                confidence_score=0.8,
                estimated_effort_hours=3
            ),
            DebtItem(
                project_id="test",
                file_id="3",
                debt_type="duplication",
                category=DebtCategory.CODE_DUPLICATION,
                severity=DebtSeverity.MEDIUM,
                debt_score=0.6,
                confidence_score=0.7,
                estimated_effort_hours=2
            ),
            DebtItem(
                project_id="test",
                file_id="4",
                debt_type="duplication", 
                category=DebtCategory.CODE_DUPLICATION,
                severity=DebtSeverity.MEDIUM,
                debt_score=0.5,
                confidence_score=0.6,
                estimated_effort_hours=2
            )
        ]
        
        # Mock project
        project = Mock(spec=ProjectIndex)
        project.id = "test-project"
        
        # Test clustering
        clusters = await detector.cluster_debt_items(debt_items, project)
        
        print(f"‚úÖ Created {len(clusters)} debt clusters")
        
        if clusters:
            for i, cluster in enumerate(clusters):
                print(f"  Cluster {i}: {len(cluster.debt_items)} items, "
                      f"dominant categories: {[c.value for c in cluster.dominant_categories]}")
        
        # Validate clustering results
        total_clustered_items = sum(len(cluster.debt_items) for cluster in clusters)
        print(f"‚úÖ Total items clustered: {total_clustered_items}/{len(debt_items)}")
        
        return len(clusters) > 0
        
    except Exception as e:
        print(f"‚ùå Error in debt clustering: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_anomaly_detection():
    """Test anomaly detection functionality."""
    print("\nüö® Testing Anomaly Detection...")
    
    try:
        # Create mock components
        base_analyzer = Mock(spec=TechnicalDebtAnalyzer)
        ml_analyzer = Mock(spec=MLAnalyzer)
        historical_analyzer = Mock(spec=HistoricalAnalyzer)
        
        detector = AdvancedDebtDetector(base_analyzer, ml_analyzer, historical_analyzer)
        
        # Create test file entries with varying debt characteristics
        file_entries = []
        for i in range(15):  # Need at least 10 for anomaly detection
            file_entry = Mock(spec=FileEntry)
            file_entry.id = i
            file_entry.file_name = f"file_{i}.py"
            file_entry.file_path = f"/test/file_{i}.py"
            file_entry.is_binary = False
            file_entry.language = "python"
            file_entry.line_count = 100 + i * 50  # Varying sizes
            file_entry.file_size = 1000 + i * 500  # Varying file sizes
            file_entry.file_type = Mock()
            file_entry.file_type.value = "python"
            file_entries.append(file_entry)
        
        # Create mock base analysis with varying debt per file
        debt_items = []
        for i in range(15):
            # Make some files have significantly more debt (anomalies)
            debt_count = 2 if i < 10 else 10  # Files 10-14 are anomalies
            
            for j in range(debt_count):
                debt_items.append(DebtItem(
                    project_id="test",
                    file_id=str(i),
                    debt_type="test_debt",
                    category=DebtCategory.COMPLEXITY,
                    severity=DebtSeverity.HIGH if i >= 10 else DebtSeverity.LOW,
                    debt_score=0.8 if i >= 10 else 0.3
                ))
        
        base_analysis = DebtAnalysisResult(
            project_id="test",
            total_debt_score=0.5,
            debt_items=debt_items,
            category_scores={},
            file_count=15,
            lines_of_code=1000,
            analysis_duration=1.0,
            recommendations=[]
        )
        
        # Test anomaly detection
        anomalies = await detector.detect_anomalies(file_entries, base_analysis)
        
        print(f"‚úÖ Detected {len(anomalies)} anomalous files")
        
        for anomaly in anomalies:
            severity = anomaly.metadata.get('severity', 'unknown')
            print(f"  üìÅ {anomaly.file_path}: {severity} severity "
                  f"(score: {anomaly.anomaly_score:.2f})")
        
        # Validate anomaly detection
        # Should detect files 10-14 as anomalies
        expected_anomalies = 5
        detected_range = len(anomalies) in range(3, 8)  # Allow some variance
        print(f"‚úÖ Anomaly detection working: {detected_range}")
        
        return len(anomalies) > 0
        
    except Exception as e:
        print(f"‚ùå Error in anomaly detection: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_trend_analysis():
    """Test debt trend analysis functionality."""
    print("\nüìà Testing Trend Analysis...")
    
    try:
        # Create mock components
        base_analyzer = Mock(spec=TechnicalDebtAnalyzer)
        ml_analyzer = Mock(spec=MLAnalyzer)
        historical_analyzer = Mock(spec=HistoricalAnalyzer)
        
        # Setup mock historical data
        historical_data = [
            {'date': '2024-01-01', 'debt_delta': 0.3, 'debt_causes': ['complexity']},
            {'date': '2024-01-02', 'debt_delta': 0.35, 'debt_causes': ['complexity', 'duplication']},
            {'date': '2024-01-03', 'debt_delta': 0.4, 'debt_causes': ['complexity']},
            {'date': '2024-01-04', 'debt_delta': 0.45, 'debt_causes': ['duplication']},
            {'date': '2024-01-05', 'debt_delta': 0.5, 'debt_causes': ['complexity']},
        ]
        
        historical_analyzer.analyze_debt_evolution = AsyncMock(return_value=historical_data)
        
        detector = AdvancedDebtDetector(base_analyzer, ml_analyzer, historical_analyzer)
        
        # Mock project
        project = Mock(spec=ProjectIndex)
        project.id = "test-project"
        
        # Test trend analysis
        trend = await detector.analyze_debt_trends(project, lookback_days=30)
        
        print(f"‚úÖ Trend analysis completed:")
        print(f"  Direction: {trend.trend_direction}")
        print(f"  Velocity: {trend.velocity:.4f}")
        print(f"  Risk Level: {trend.risk_level}")
        print(f"  Projected debt in 30 days: {trend.projected_debt_in_30_days:.2f}")
        print(f"  Causes: {trend.trend_causes}")
        print(f"  Recommendations: {len(trend.intervention_recommendations)}")
        
        # Validate trend analysis
        valid_directions = ["increasing", "decreasing", "stable", "volatile"]
        direction_valid = trend.trend_direction in valid_directions
        
        risk_levels = ["low", "medium", "high", "improving"]
        risk_valid = trend.risk_level in risk_levels
        
        print(f"‚úÖ Valid trend direction: {direction_valid}")
        print(f"‚úÖ Valid risk level: {risk_valid}")
        
        return direction_valid and risk_valid
        
    except Exception as e:
        print(f"‚ùå Error in trend analysis: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """Main test function."""
    print("üöÄ Starting Advanced Technical Debt Detector Tests\n")
    
    # Run all tests
    pattern_success = await test_advanced_pattern_detection()
    clustering_success = await test_debt_clustering()  
    anomaly_success = await test_anomaly_detection()
    trend_success = await test_trend_analysis()
    
    print(f"\n{'='*70}")
    print("üìã ADVANCED DEBT DETECTOR TEST SUMMARY:")
    print(f"  Pattern Detection: {'‚úÖ PASSED' if pattern_success else '‚ùå FAILED'}")
    print(f"  Debt Clustering: {'‚úÖ PASSED' if clustering_success else '‚ùå FAILED'}")
    print(f"  Anomaly Detection: {'‚úÖ PASSED' if anomaly_success else '‚ùå FAILED'}")
    print(f"  Trend Analysis: {'‚úÖ PASSED' if trend_success else '‚ùå FAILED'}")
    
    all_passed = pattern_success and clustering_success and anomaly_success and trend_success
    
    if all_passed:
        print("\nüéâ ALL ADVANCED DEBT DETECTOR TESTS PASSED!")
        print("\nüìã Phase 2 Advanced Detection: READY FOR INTEGRATION")
        print("   ‚úÖ ML-powered pattern detection working")
        print("   ‚úÖ God class, security, performance pattern detection")
        print("   ‚úÖ Debt clustering for coordinated remediation") 
        print("   ‚úÖ Anomaly detection for outlier identification")
        print("   ‚úÖ Trend analysis with predictions and recommendations")
        print("\nüìã Ready for Phase 2.2: ML Infrastructure Integration")
        return True
    else:
        print("\n‚ùå SOME ADVANCED DEBT DETECTOR TESTS FAILED")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)