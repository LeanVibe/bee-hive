# LeanVibe Agent Hive 2.0 - Comprehensive Environment Configuration Template
# Epic 6 Phase 2: Database & Infrastructure Validation
#
# This template provides a comprehensive configuration for all environments:
# - Development: Full-featured local development
# - Testing: Optimized for automated testing 
# - Staging: Production-like environment for validation
# - Production: Secure, scalable configuration

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Basic Application Settings
APP_NAME="LeanVibe Agent Hive 2.0"
ENVIRONMENT=development  # development, testing, staging, production
DEBUG=true               # Set to false in production
LOG_LEVEL=INFO          # DEBUG, INFO, WARNING, ERROR, CRITICAL

# Application Version (CI/CD will populate these)
APP_VERSION=2.0.0
BUILD_DATE=
VCS_REF=

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# CRITICAL: Change these keys in production - minimum 32 chars for SECRET_KEY, 64 for JWT
SECRET_KEY=development-secret-key-change-in-production-minimum-32-chars-for-security
JWT_SECRET_KEY=development-jwt-secret-key-change-in-production-minimum-64-chars-for-maximum-security
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# Security Features (Enable in production)
SECURITY_ENABLED=true
MFA_ENABLED=false        # Set to true in production
API_RATE_LIMIT_ENABLED=true
THREAT_DETECTION_ENABLED=true
SECURITY_AUDIT_ENABLED=true

# Compliance Settings (Required for enterprise)
COMPLIANCE_ENABLED=true
SOC2_COMPLIANCE=true
GDPR_COMPLIANCE=true
AUDIT_LOG_RETENTION_DAYS=2555  # 7 years for compliance

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database Settings
# Development: Uses Docker Compose PostgreSQL on port 15432
# Production: Use managed database service with connection pooling
DATABASE_URL=postgresql+asyncpg://leanvibe_user:leanvibe_secure_pass@localhost:15432/leanvibe_agent_hive
DATABASE_POOL_SIZE=20
DATABASE_MAX_OVERFLOW=30

# Database credentials (Docker Compose defaults)
POSTGRES_DB=leanvibe_agent_hive
POSTGRES_USER=leanvibe_user
POSTGRES_PASSWORD=leanvibe_secure_pass
POSTGRES_PORT=15432

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

# Redis Cache and Message Broker
# Development: Uses Docker Compose Redis on port 16379
# Production: Use managed Redis service with clustering
REDIS_URL=redis://:leanvibe_redis_pass@localhost:16379/0
REDIS_STREAM_MAX_LEN=10000
REDIS_PASSWORD=leanvibe_redis_pass
REDIS_PORT=16379

# Redis Performance Settings
REDIS_CONNECTION_POOL_SIZE=50
REDIS_MAX_CONNECTIONS=200
REDIS_CONNECTION_TIMEOUT=5.0

# =============================================================================
# AI SERVICE CONFIGURATION
# =============================================================================

# Anthropic Claude API
ANTHROPIC_API_KEY=your-anthropic-api-key-here
ANTHROPIC_MODEL=claude-3-5-sonnet-20241022
ANTHROPIC_MAX_TOKENS=4096

# OpenAI API (Alternative/Supplementary)
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_BASE_URL=https://api.openai.com/v1
OPENAI_MODEL=gpt-4-turbo-preview

# OpenAI Embedding Service
OPENAI_EMBEDDING_MODEL=text-embedding-ada-002
OPENAI_EMBEDDING_MAX_TOKENS=8191
OPENAI_EMBEDDING_CACHE_TTL=3600
OPENAI_EMBEDDING_MAX_RETRIES=3
OPENAI_EMBEDDING_RATE_LIMIT_RPM=3000
OPENAI_EMBEDDING_BATCH_SIZE=100

# =============================================================================
# GITHUB INTEGRATION
# =============================================================================

# GitHub API Integration (Optional)
GITHUB_TOKEN=your-github-personal-access-token
GITHUB_APP_ID=your-github-app-id
GITHUB_PRIVATE_KEY=your-github-app-private-key
GITHUB_API_URL=https://api.github.com

# GitHub Repository Settings
GITHUB_USERNAME=your-username
GITHUB_REPO_OWNER=your-organization
GITHUB_REPO_NAME=your-repository

# Workspace Configuration
WORK_TREES_BASE_PATH=/tmp/agent-workspaces
BASE_URL=http://localhost:18080  # For webhook URLs

# =============================================================================
# NETWORKING AND PORTS
# =============================================================================

# API Server Configuration
API_HOST=localhost
API_PORT=18080
MAIN_API_PORT=8100     # Docker internal mapping

# Frontend Development Server
PWA_DEV_PORT=18443
PWA_PREVIEW_PORT=18444
DASHBOARD_PORT=3001
FRONTEND_HMR_PORT=24678

# Debug and Development
API_DEBUG_PORT=5678

# CORS and Security Headers
CORS_ORIGINS=http://localhost:18080,http://localhost:18443,http://localhost:18444,http://localhost:3001,http://127.0.0.1:18080
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,api

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================

# Prometheus Metrics
PROMETHEUS_PORT=19090
PROMETHEUS_ENABLED=true
PROMETHEUS_METRICS_ENABLED=true

# Grafana Dashboard
GRAFANA_PORT=3101
GRAFANA_PASSWORD=admin_password

# Monitoring Services
PERFORMANCE_MONITORING_ENABLED=true
STREAM_MONITORING_ENABLED=true
STREAM_MONITORING_INTERVAL=5
METRICS_ENABLED=true

# Application Performance Monitoring
TARGET_THROUGHPUT_MSG_PER_SEC=10000
TARGET_P95_LATENCY_MS=200.0
TARGET_P99_LATENCY_MS=500.0
TARGET_SUCCESS_RATE=0.999

# =============================================================================
# DATABASE MANAGEMENT TOOLS
# =============================================================================

# pgAdmin for PostgreSQL Management
PGADMIN_EMAIL=admin@leanvibe.dev
PGADMIN_PASSWORD=admin_password
PGADMIN_PORT=5150

# Adminer (Lightweight DB Management)
ADMINER_PORT=8203

# =============================================================================
# REDIS MANAGEMENT TOOLS
# =============================================================================

# Redis Commander
REDIS_COMMANDER_PORT=8201
REDIS_COMMANDER_USER=admin
REDIS_COMMANDER_PASSWORD=admin

# Redis Insight
REDIS_INSIGHT_PORT=8202

# =============================================================================
# MULTI-AGENT ORCHESTRATION
# =============================================================================

# Orchestrator Configuration
USE_SIMPLE_ORCHESTRATOR=true
MAX_CONCURRENT_AGENTS=50
ORCHESTRATOR_TYPE=simple
AGENT_HEARTBEAT_INTERVAL=30
AGENT_TIMEOUT=300

# Message Processing
MAX_MESSAGE_SIZE_BYTES=1048576  # 1MB
MESSAGE_BATCH_SIZE=100
MESSAGE_BATCH_WAIT_MS=50
ADAPTIVE_BATCHING_ENABLED=true

# Context Management
CONTEXT_MAX_TOKENS=8000
CONTEXT_COMPRESSION_THRESHOLD=0.8
CONSOLIDATION_THRESHOLD=0.85
SLEEP_CYCLE_INTERVAL=3600

# =============================================================================
# PERFORMANCE OPTIMIZATION
# =============================================================================

# Compression Settings
COMPRESSION_ENABLED=true
COMPRESSION_ALGORITHM=zlib
COMPRESSION_LEVEL=6
COMPRESSION_MIN_SIZE=1024

# Back-pressure Management
BACKPRESSURE_ENABLED=true
BACKPRESSURE_WARNING_LAG=1000
BACKPRESSURE_CRITICAL_LAG=5000
CONSUMER_MIN_COUNT=1
CONSUMER_MAX_COUNT=10

# Circuit Breaker
CIRCUIT_BREAKER_ENABLED=true
CIRCUIT_BREAKER_FAILURE_THRESHOLD=10
CIRCUIT_BREAKER_TIMEOUT_SECONDS=60

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Core Features
ENABLE_HOT_RELOAD=true
ENABLE_DEBUG_TOOLBAR=true
SKIP_STARTUP_INIT=false

# Advanced Features
ENABLE_WEBAUTHN=true
ENABLE_GITHUB_INTEGRATION=true
ENABLE_ENTERPRISE_TEMPLATES=false
ENABLE_MOCK_DATA=false

# Security Features
SECRETS_ENCRYPTION_ENABLED=true
SECRET_ROTATION_ENABLED=true

# Self-Modification System
SELF_MODIFICATION_ENABLED=true
SAFE_MODIFICATION_ONLY=true

# =============================================================================
# WEBSOCKET CONFIGURATION
# =============================================================================

# WebSocket Settings
WS_AUTH_REQUIRED=false
WS_AUTH_MODE=token
WS_AUTH_TOKEN=dev-token-change-me

# Hook System Configuration
HOOK_BATCH_SIZE=100
HOOK_FLUSH_INTERVAL_MS=1000
HOOK_PERFORMANCE_THRESHOLD_MS=50.0
HOOK_WEBSOCKET_STREAMING_ENABLED=true
HOOK_REDIS_STREAMING_ENABLED=true

# =============================================================================
# EXTERNAL TOOLS AND INTEGRATIONS
# =============================================================================

# Docker Configuration
DOCKER_HOST=unix:///var/run/docker.sock
DOCKER_REGISTRY=docker.io

# Git Configuration
GIT_DEFAULT_BRANCH=main
GIT_USER_NAME=LeanVibe Agent
GIT_USER_EMAIL=agent@leanvibe.dev

# CI/CD Configuration
CI_CD_ENABLED=true
DEPLOYMENT_TIMEOUT=1800

# External Tools Security
EXTERNAL_TOOLS_SECURITY_LEVEL=moderate
ALLOW_SYSTEM_COMMANDS=false

# =============================================================================
# LOGGING AND ELK STACK
# =============================================================================

# Elasticsearch
ELASTICSEARCH_PORT=9200

# Logstash
LOGSTASH_BEATS_PORT=5044
LOGSTASH_TCP_PORT=5000
LOGSTASH_API_PORT=9600

# Kibana
KIBANA_PORT=5601

# =============================================================================
# DEVELOPMENT AND TESTING
# =============================================================================

# Development Settings
SANDBOX_MODE=false
SANDBOX_DEMO_MODE=false

# Testing Configuration
PYTEST_WORKERS=4
LOAD_TEST_ENABLED=false
LOAD_TEST_DURATION_MINUTES=10
LOAD_TEST_CONCURRENT_PRODUCERS=50

# Jupyter Notebook (Data Analysis)
JUPYTER_PORT=8888
JUPYTER_TOKEN=leanvibe_jupyter_token

# =============================================================================
# TMUX INTEGRATION
# =============================================================================

# tmux Session Management
TMUX_SESSION_NAME=agent-hive
TMUX_AUTO_CREATE=true

# =============================================================================
# DEAD LETTER QUEUE CONFIGURATION
# =============================================================================

# DLQ Settings
DLQ_MAX_RETRIES=3
DLQ_INITIAL_RETRY_DELAY_MS=1000
DLQ_MAX_RETRY_DELAY_MS=60000
DLQ_MAX_SIZE=100000
DLQ_TTL_HOURS=72
DLQ_POLICY=exponential_backoff

# =============================================================================
# ADVANCED MONITORING
# =============================================================================

# Alerting
ALERTMANAGER_PORT=9093

# Container Monitoring
CADVISOR_PORT=8180
NODE_EXPORTER_PORT=9100

# Database Monitoring
POSTGRES_EXPORTER_PORT=9187
REDIS_EXPORTER_PORT=9121

# =============================================================================
# NGINX REVERSE PROXY (PRODUCTION)
# =============================================================================

# Nginx Configuration (for production deployments)
NGINX_HTTP_PORT=8000
NGINX_HTTPS_PORT=8443

# =============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =============================================================================

# Development Environment Overrides
# - Enable debug features
# - Use Docker Compose services
# - Relaxed security settings

# Testing Environment Overrides  
# - Use in-memory/test databases
# - Disable external service calls
# - Fast, isolated execution

# Staging Environment Overrides
# - Production-like configuration
# - Use managed services
# - Enable comprehensive monitoring

# Production Environment Overrides
# - Maximum security settings
# - Managed/clustered services
# - Full monitoring and alerting
# - No debug features

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# 1. Copy this template to .env in your environment
# 2. Update all placeholder values (your-*-here)
# 3. Generate secure random keys for SECRET_KEY and JWT_SECRET_KEY
# 4. Configure database and Redis connections for your environment
# 5. Set up monitoring endpoints and credentials
# 6. Enable appropriate feature flags for your deployment
# 7. Review security settings for production deployments

# For production:
# - Set ENVIRONMENT=production
# - Set DEBUG=false
# - Use strong, randomly generated secrets
# - Enable all security features
# - Use managed database and Redis services
# - Configure proper CORS origins and allowed hosts
# - Set up comprehensive monitoring and alerting