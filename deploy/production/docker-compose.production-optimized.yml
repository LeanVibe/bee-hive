version: '3.8'

# LeanVibe Agent Hive 2.0 - Production Deployment Configuration
# Epic 7 Phase 1: Production Infrastructure Setup

services:
  # Production PostgreSQL with PgBouncer connection pooling
  postgres:
    image: pgvector/pgvector:pg15
    container_name: leanvibe_postgres_prod
    environment:
      POSTGRES_DB: leanvibe_agent_hive
      POSTGRES_USER: leanvibe_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
      # Production optimizations
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./../../database/migrations:/docker-entrypoint-initdb.d
      - ./../../database/backups:/backups
      - ./../../config/postgresql.production.conf:/etc/postgresql/postgresql.conf:ro
      - ./../../database/scripts:/scripts:ro
    networks:
      - leanvibe_network
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leanvibe_user -d leanvibe_agent_hive"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=postgres,environment=production"

  # PgBouncer for connection pooling
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: leanvibe_pgbouncer_prod
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: leanvibe_user
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: leanvibe_agent_hive
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 50
      MAX_DB_CONNECTIONS: 100
      MAX_USER_CONNECTIONS: 100
      SERVER_ROUND_ROBIN: 1
      IGNORE_STARTUP_PARAMETERS: extra_float_digits
    ports:
      - "127.0.0.1:6432:5432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Production Redis Cluster with Sentinel
  redis-master:
    image: redis:7-alpine
    container_name: leanvibe_redis_master_prod
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_master_data:/data
      - ./../../config/redis.production.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - leanvibe_network
    ports:
      - "127.0.0.1:6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=redis-master,environment=production"

  # Redis Replica for read scaling
  redis-replica:
    image: redis:7-alpine
    container_name: leanvibe_redis_replica_prod
    command: redis-server /usr/local/etc/redis/redis.conf --replicaof redis-master 6379
    volumes:
      - redis_replica_data:/data
      - ./../../config/redis.production.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - leanvibe_network
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Sentinel for high availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: leanvibe_redis_sentinel_prod
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    networks:
      - leanvibe_network
    depends_on:
      - redis-master
      - redis-replica
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Production API with horizontal scaling capability
  api:
    build:
      context: ./../../
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
        - VERSION=${VERSION}
    image: leanvibe/agent-hive-api:${VERSION:-latest}
    environment:
      # Database Configuration (via PgBouncer)
      - DATABASE_URL=postgresql+asyncpg://leanvibe_user:${POSTGRES_PASSWORD}@pgbouncer:5432/leanvibe_agent_hive
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/0
      - REDIS_REPLICA_URL=redis://:${REDIS_PASSWORD}@redis-replica:6379/0
      
      # AI Service Configuration
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL:-claude-3-5-sonnet-20241022}
      
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # Application Configuration
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      - APP_NAME=LeanVibe Agent Hive
      - APP_VERSION=${VERSION:-2.0.0}
      
      # CORS and Security
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECURE_COOKIES=true
      - COOKIE_SAMESITE=strict
      
      # Performance Configuration
      - WORKERS=4
      - MAX_REQUESTS=10000
      - MAX_REQUESTS_JITTER=1000
      - PRELOAD_APP=true
      - WORKER_CONNECTIONS=1000
      - KEEPALIVE=5
      
      # Feature Flags
      - ENABLE_WEBAUTHN=true
      - ENABLE_GITHUB_INTEGRATION=true
      - ENABLE_ENTERPRISE_TEMPLATES=true
      - ENABLE_RATE_LIMITING=true
      - ENABLE_METRICS=true
      
      # Monitoring and Health
      - PROMETHEUS_ENABLED=true
      - SENTRY_DSN=${SENTRY_DSN}
      - HEALTH_CHECK_ENABLED=true
      - METRICS_ENDPOINT_ENABLED=true
      
      # Resource Limits
      - MAX_UPLOAD_SIZE=50MB
      - REQUEST_TIMEOUT=300
      - WORKER_TIMEOUT=300
      
    networks:
      - leanvibe_network
    depends_on:
      pgbouncer:
        condition: service_started
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "User-Agent: HealthCheck", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      replicas: 2  # Horizontal scaling
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=api,environment=production"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # Production Nginx with advanced configurations
  nginx:
    image: nginx:alpine
    container_name: leanvibe_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./../../config/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./../../mobile-pwa/dist:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx-cache:/var/cache/nginx
      - ./nginx-logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - leanvibe_network
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - API_UPSTREAM=api:8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=nginx,environment=production"

  # Automated SSL Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: leanvibe_certbot_prod
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot-webroot:/var/www/certbot
    environment:
      - EMAIL=${ADMIN_EMAIL}
      - DOMAINS=${DOMAIN_NAME},www.${DOMAIN_NAME},api.${DOMAIN_NAME}
    command: >
      sh -c '
        trap exit TERM;
        while :; do
          certbot renew --webroot --webroot-path=/var/www/certbot --quiet --no-self-upgrade;
          sleep 43200 & wait $${!};
        done;
      '
    networks:
      - leanvibe_network
    restart: unless-stopped

  # Production Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: leanvibe_prometheus_prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./../../infrastructure/monitoring/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - ./../../infrastructure/monitoring/recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
      - ./../../infrastructure/monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.wal-compression'
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # AlertManager for production alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: leanvibe_alertmanager_prod
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - ./../../infrastructure/monitoring/alertmanager.production.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_prod_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://${DOMAIN_NAME}/alertmanager/'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana for production dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: leanvibe_grafana_prod
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://${DOMAIN_NAME}/grafana/
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./../../infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./../../infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Centralized Logging - Loki
  loki:
    image: grafana/loki:latest
    container_name: leanvibe_loki_prod
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_prod_data:/loki
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Log collection agent - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: leanvibe_promtail_prod
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Database backup service
  db-backup:
    build:
      context: ./../../
      dockerfile: Dockerfile.backup
    container_name: leanvibe_db_backup_prod
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=leanvibe_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=leanvibe_agent_hive
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - SLACK_WEBHOOK=${BACKUP_SLACK_WEBHOOK}
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - ./../../database/backups:/backups
      - ./../../database/scripts:/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Resource monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: leanvibe_node_exporter_prod
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Container monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: leanvibe_cadvisor_prod
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - leanvibe_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

networks:
  leanvibe_network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/leanvibe/postgres
  redis_master_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/leanvibe/redis-master
  redis_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/leanvibe/redis-replica
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/leanvibe/prometheus
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/leanvibe/grafana
  alertmanager_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/leanvibe/alertmanager
  loki_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/leanvibe/loki