{
  "batch_id": "init_batch_008",
  "files": [
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/zipp/compat/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/websockets/legacy/__init__.py",
      "current_size_lines": 8,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 3,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/websockets/extensions/__init__.py",
      "current_size_lines": 2,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .base import *",
        "__all__ = [\"Extension\", \"ClientExtensionFactory\", \"ServerExtensionFactory\"]"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/websockets/sync/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/websockets/asyncio/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/gunicorn/app/__init__.py",
      "current_size_lines": 3,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/gunicorn/instrument/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/gunicorn/http/__init__.py",
      "current_size_lines": 6,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "__all__ = ['Message', 'Request', 'RequestParser']"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/gunicorn/workers/__init__.py",
      "current_size_lines": 13,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 8,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/connectors/__init__.py",
      "current_size_lines": 12,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from ..engine.interfaces import Dialect"
      ],
      "estimated_loc_savings": 6,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/util/__init__.py",
      "current_size_lines": 157,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from . import preloaded as preloaded",
        "from ._collections import coerce_generator_arg as coerce_generator_arg",
        "from ._collections import coerce_to_immutabledict as coerce_to_immutabledict",
        "from ._collections import column_dict as column_dict",
        "from ._collections import column_set as column_set",
        "from ._collections import EMPTY_DICT as EMPTY_DICT",
        "from ._collections import EMPTY_SET as EMPTY_SET",
        "from ._collections import FacadeDict as FacadeDict",
        "from ._collections import flatten_iterator as flatten_iterator",
        "from ._collections import has_dupes as has_dupes",
        "from ._collections import has_intersection as has_intersection",
        "from ._collections import IdentitySet as IdentitySet",
        "from ._collections import immutabledict as immutabledict",
        "from ._collections import LRUCache as LRUCache",
        "from ._collections import merge_lists_w_ordering as merge_lists_w_ordering",
        "from ._collections import NONE_SET as NONE_SET",
        "from ._collections import ordered_column_set as ordered_column_set",
        "from ._collections import OrderedDict as OrderedDict",
        "from ._collections import OrderedIdentitySet as OrderedIdentitySet",
        "from ._collections import OrderedProperties as OrderedProperties",
        "from ._collections import OrderedSet as OrderedSet",
        "from ._collections import PopulateDict as PopulateDict",
        "from ._collections import Properties as Properties",
        "from ._collections import ReadOnlyContainer as ReadOnlyContainer",
        "from ._collections import ReadOnlyProperties as ReadOnlyProperties",
        "from ._collections import ScopedRegistry as ScopedRegistry",
        "from ._collections import sort_dictionary as sort_dictionary",
        "from ._collections import ThreadLocalRegistry as ThreadLocalRegistry",
        "from ._collections import to_column_set as to_column_set",
        "from ._collections import to_list as to_list",
        "from ._collections import to_set as to_set",
        "from ._collections import unique_list as unique_list",
        "from ._collections import UniqueAppender as UniqueAppender",
        "from ._collections import update_copy as update_copy",
        "from ._collections import WeakPopulateDict as WeakPopulateDict",
        "from ._collections import WeakSequence as WeakSequence",
        "from .compat import anext_ as anext_",
        "from .compat import arm as arm",
        "from .compat import b as b",
        "from .compat import b64decode as b64decode",
        "from .compat import b64encode as b64encode",
        "from .compat import cmp as cmp",
        "from .compat import cpython as cpython",
        "from .compat import dataclass_fields as dataclass_fields",
        "from .compat import decode_backslashreplace as decode_backslashreplace",
        "from .compat import dottedgetter as dottedgetter",
        "from .compat import has_refcount_gc as has_refcount_gc",
        "from .compat import inspect_getfullargspec as inspect_getfullargspec",
        "from .compat import is64bit as is64bit",
        "from .compat import local_dataclass_fields as local_dataclass_fields",
        "from .compat import osx as osx",
        "from .compat import py310 as py310",
        "from .compat import py311 as py311",
        "from .compat import py312 as py312",
        "from .compat import py313 as py313",
        "from .compat import py314 as py314",
        "from .compat import py38 as py38",
        "from .compat import py39 as py39",
        "from .compat import pypy as pypy",
        "from .compat import win32 as win32",
        "from .concurrency import await_fallback as await_fallback",
        "from .concurrency import await_only as await_only",
        "from .concurrency import greenlet_spawn as greenlet_spawn",
        "from .concurrency import is_exit_exception as is_exit_exception",
        "from .deprecations import became_legacy_20 as became_legacy_20",
        "from .deprecations import deprecated as deprecated",
        "from .deprecations import deprecated_cls as deprecated_cls",
        "from .deprecations import deprecated_params as deprecated_params",
        "from .deprecations import moved_20 as moved_20",
        "from .deprecations import warn_deprecated as warn_deprecated",
        "from .langhelpers import add_parameter_text as add_parameter_text",
        "from .langhelpers import as_interface as as_interface",
        "from .langhelpers import asbool as asbool",
        "from .langhelpers import asint as asint",
        "from .langhelpers import assert_arg_type as assert_arg_type",
        "from .langhelpers import attrsetter as attrsetter",
        "from .langhelpers import bool_or_str as bool_or_str",
        "from .langhelpers import chop_traceback as chop_traceback",
        "from .langhelpers import class_hierarchy as class_hierarchy",
        "from .langhelpers import classproperty as classproperty",
        "from .langhelpers import clsname_as_plain_name as clsname_as_plain_name",
        "from .langhelpers import coerce_kw_type as coerce_kw_type",
        "from .langhelpers import constructor_copy as constructor_copy",
        "from .langhelpers import constructor_key as constructor_key",
        "from .langhelpers import counter as counter",
        "from .langhelpers import create_proxy_methods as create_proxy_methods",
        "from .langhelpers import decode_slice as decode_slice",
        "from .langhelpers import decorator as decorator",
        "from .langhelpers import dictlike_iteritems as dictlike_iteritems",
        "from .langhelpers import duck_type_collection as duck_type_collection",
        "from .langhelpers import ellipses_string as ellipses_string",
        "from .langhelpers import EnsureKWArg as EnsureKWArg",
        "from .langhelpers import FastIntFlag as FastIntFlag",
        "from .langhelpers import format_argspec_init as format_argspec_init",
        "from .langhelpers import format_argspec_plus as format_argspec_plus",
        "from .langhelpers import generic_fn_descriptor as generic_fn_descriptor",
        "from .langhelpers import generic_repr as generic_repr",
        "from .langhelpers import get_annotations as get_annotations",
        "from .langhelpers import get_callable_argspec as get_callable_argspec",
        "from .langhelpers import get_cls_kwargs as get_cls_kwargs",
        "from .langhelpers import get_func_kwargs as get_func_kwargs",
        "from .langhelpers import getargspec_init as getargspec_init",
        "from .langhelpers import has_compiled_ext as has_compiled_ext",
        "from .langhelpers import HasMemoized as HasMemoized",
        "from .langhelpers import (",
        "from .langhelpers import hybridmethod as hybridmethod",
        "from .langhelpers import hybridproperty as hybridproperty",
        "from .langhelpers import inject_docstring_text as inject_docstring_text",
        "from .langhelpers import iterate_attributes as iterate_attributes",
        "from .langhelpers import map_bits as map_bits",
        "from .langhelpers import md5_hex as md5_hex",
        "from .langhelpers import memoized_instancemethod as memoized_instancemethod",
        "from .langhelpers import memoized_property as memoized_property",
        "from .langhelpers import MemoizedSlots as MemoizedSlots",
        "from .langhelpers import method_is_overridden as method_is_overridden",
        "from .langhelpers import methods_equivalent as methods_equivalent",
        "from .langhelpers import (",
        "from .langhelpers import non_memoized_property as non_memoized_property",
        "from .langhelpers import NoneType as NoneType",
        "from .langhelpers import only_once as only_once",
        "from .langhelpers import (",
        "from .langhelpers import PluginLoader as PluginLoader",
        "from .langhelpers import portable_instancemethod as portable_instancemethod",
        "from .langhelpers import quoted_token_parser as quoted_token_parser",
        "from .langhelpers import ro_memoized_property as ro_memoized_property",
        "from .langhelpers import ro_non_memoized_property as ro_non_memoized_property",
        "from .langhelpers import rw_hybridproperty as rw_hybridproperty",
        "from .langhelpers import safe_reraise as safe_reraise",
        "from .langhelpers import set_creation_order as set_creation_order",
        "from .langhelpers import string_or_unprintable as string_or_unprintable",
        "from .langhelpers import symbol as symbol",
        "from .langhelpers import TypingOnly as TypingOnly",
        "from .langhelpers import (",
        "from .langhelpers import walk_subclasses as walk_subclasses",
        "from .langhelpers import warn as warn",
        "from .langhelpers import warn_exception as warn_exception",
        "from .langhelpers import warn_limited as warn_limited",
        "from .langhelpers import wrap_callable as wrap_callable",
        "from .preloaded import preload_module as preload_module",
        "from .typing import is_non_string_iterable as is_non_string_iterable"
      ],
      "estimated_loc_savings": 12,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/ext/__init__.py",
      "current_size_lines": 8,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from .. import util as _sa_util"
      ],
      "estimated_loc_savings": 2,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/testing/__init__.py",
      "current_size_lines": 89,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from . import config",
        "from .assertions import assert_raises",
        "from .assertions import assert_raises_context_ok",
        "from .assertions import assert_raises_message",
        "from .assertions import assert_raises_message_context_ok",
        "from .assertions import assert_warns",
        "from .assertions import assert_warns_message",
        "from .assertions import AssertsCompiledSQL",
        "from .assertions import AssertsExecutionResults",
        "from .assertions import ComparesIndexes",
        "from .assertions import ComparesTables",
        "from .assertions import emits_warning",
        "from .assertions import emits_warning_on",
        "from .assertions import eq_",
        "from .assertions import eq_ignore_whitespace",
        "from .assertions import eq_regex",
        "from .assertions import expect_deprecated",
        "from .assertions import expect_deprecated_20",
        "from .assertions import expect_raises",
        "from .assertions import expect_raises_message",
        "from .assertions import expect_warnings",
        "from .assertions import in_",
        "from .assertions import int_within_variance",
        "from .assertions import is_",
        "from .assertions import is_false",
        "from .assertions import is_instance_of",
        "from .assertions import is_none",
        "from .assertions import is_not",
        "from .assertions import is_not_",
        "from .assertions import is_not_none",
        "from .assertions import is_true",
        "from .assertions import le_",
        "from .assertions import ne_",
        "from .assertions import not_in",
        "from .assertions import not_in_",
        "from .assertions import startswith_",
        "from .assertions import uses_deprecated",
        "from .config import add_to_marker",
        "from .config import async_test",
        "from .config import combinations",
        "from .config import combinations_list",
        "from .config import db",
        "from .config import fixture",
        "from .config import requirements as requires",
        "from .config import skip_test",
        "from .config import Variation",
        "from .config import variation",
        "from .config import variation_fixture",
        "from .exclusions import _is_excluded",
        "from .exclusions import _server_version",
        "from .exclusions import against as _against",
        "from .exclusions import db_spec",
        "from .exclusions import exclude",
        "from .exclusions import fails",
        "from .exclusions import fails_if",
        "from .exclusions import fails_on",
        "from .exclusions import fails_on_everything_except",
        "from .exclusions import future",
        "from .exclusions import only_if",
        "from .exclusions import only_on",
        "from .exclusions import skip",
        "from .exclusions import skip_if",
        "from .schema import eq_clause_element",
        "from .schema import eq_type_affinity",
        "from .util import adict",
        "from .util import fail",
        "from .util import flag_combinations",
        "from .util import force_drop_names",
        "from .util import lambda_combinations",
        "from .util import metadata_fixture",
        "from .util import provide_metadata",
        "from .util import resolve_lambda",
        "from .util import rowset",
        "from .util import run_as_contextmanager",
        "from .util import skip_if_timeout",
        "from .util import teardown_events",
        "from .warnings import assert_warnings",
        "from .warnings import warn_test_suite"
      ],
      "estimated_loc_savings": 6,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/cyextension/__init__.py",
      "current_size_lines": 6,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 1,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/__init__.py",
      "current_size_lines": 48,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .. import util",
        "    from ..engine.interfaces import Dialect",
        "__all__ = (\"mssql\", \"mysql\", \"oracle\", \"postgresql\", \"sqlite\")"
      ],
      "estimated_loc_savings": 40,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/orm/__init__.py",
      "current_size_lines": 160,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from . import exc as exc",
        "from . import mapper as mapperlib",
        "from . import strategy_options as strategy_options",
        "from ._orm_constructors import _mapper_fn as mapper",
        "from ._orm_constructors import aliased as aliased",
        "from ._orm_constructors import backref as backref",
        "from ._orm_constructors import clear_mappers as clear_mappers",
        "from ._orm_constructors import column_property as column_property",
        "from ._orm_constructors import composite as composite",
        "from ._orm_constructors import contains_alias as contains_alias",
        "from ._orm_constructors import create_session as create_session",
        "from ._orm_constructors import deferred as deferred",
        "from ._orm_constructors import dynamic_loader as dynamic_loader",
        "from ._orm_constructors import join as join",
        "from ._orm_constructors import mapped_column as mapped_column",
        "from ._orm_constructors import orm_insert_sentinel as orm_insert_sentinel",
        "from ._orm_constructors import outerjoin as outerjoin",
        "from ._orm_constructors import query_expression as query_expression",
        "from ._orm_constructors import relationship as relationship",
        "from ._orm_constructors import synonym as synonym",
        "from ._orm_constructors import with_loader_criteria as with_loader_criteria",
        "from ._orm_constructors import with_polymorphic as with_polymorphic",
        "from .attributes import AttributeEventToken as AttributeEventToken",
        "from .attributes import InstrumentedAttribute as InstrumentedAttribute",
        "from .attributes import QueryableAttribute as QueryableAttribute",
        "from .base import class_mapper as class_mapper",
        "from .base import DynamicMapped as DynamicMapped",
        "from .base import InspectionAttrExtensionType as InspectionAttrExtensionType",
        "from .base import LoaderCallableStatus as LoaderCallableStatus",
        "from .base import Mapped as Mapped",
        "from .base import NotExtension as NotExtension",
        "from .base import ORMDescriptor as ORMDescriptor",
        "from .base import PassiveFlag as PassiveFlag",
        "from .base import SQLORMExpression as SQLORMExpression",
        "from .base import WriteOnlyMapped as WriteOnlyMapped",
        "from .context import FromStatement as FromStatement",
        "from .context import QueryContext as QueryContext",
        "from .decl_api import add_mapped_attribute as add_mapped_attribute",
        "from .decl_api import as_declarative as as_declarative",
        "from .decl_api import declarative_base as declarative_base",
        "from .decl_api import declarative_mixin as declarative_mixin",
        "from .decl_api import DeclarativeBase as DeclarativeBase",
        "from .decl_api import DeclarativeBaseNoMeta as DeclarativeBaseNoMeta",
        "from .decl_api import DeclarativeMeta as DeclarativeMeta",
        "from .decl_api import declared_attr as declared_attr",
        "from .decl_api import has_inherited_table as has_inherited_table",
        "from .decl_api import MappedAsDataclass as MappedAsDataclass",
        "from .decl_api import registry as registry",
        "from .decl_api import synonym_for as synonym_for",
        "from .decl_base import MappedClassProtocol as MappedClassProtocol",
        "from .descriptor_props import Composite as Composite",
        "from .descriptor_props import CompositeProperty as CompositeProperty",
        "from .descriptor_props import Synonym as Synonym",
        "from .descriptor_props import SynonymProperty as SynonymProperty",
        "from .dynamic import AppenderQuery as AppenderQuery",
        "from .events import AttributeEvents as AttributeEvents",
        "from .events import InstanceEvents as InstanceEvents",
        "from .events import InstrumentationEvents as InstrumentationEvents",
        "from .events import MapperEvents as MapperEvents",
        "from .events import QueryEvents as QueryEvents",
        "from .events import SessionEvents as SessionEvents",
        "from .identity import IdentityMap as IdentityMap",
        "from .instrumentation import ClassManager as ClassManager",
        "from .interfaces import EXT_CONTINUE as EXT_CONTINUE",
        "from .interfaces import EXT_SKIP as EXT_SKIP",
        "from .interfaces import EXT_STOP as EXT_STOP",
        "from .interfaces import InspectionAttr as InspectionAttr",
        "from .interfaces import InspectionAttrInfo as InspectionAttrInfo",
        "from .interfaces import MANYTOMANY as MANYTOMANY",
        "from .interfaces import MANYTOONE as MANYTOONE",
        "from .interfaces import MapperProperty as MapperProperty",
        "from .interfaces import NO_KEY as NO_KEY",
        "from .interfaces import NO_VALUE as NO_VALUE",
        "from .interfaces import ONETOMANY as ONETOMANY",
        "from .interfaces import PropComparator as PropComparator",
        "from .interfaces import RelationshipDirection as RelationshipDirection",
        "from .interfaces import UserDefinedOption as UserDefinedOption",
        "from .loading import merge_frozen_result as merge_frozen_result",
        "from .loading import merge_result as merge_result",
        "from .mapped_collection import attribute_keyed_dict as attribute_keyed_dict",
        "from .mapped_collection import (",
        "from .mapped_collection import column_keyed_dict as column_keyed_dict",
        "from .mapped_collection import (",
        "from .mapped_collection import keyfunc_mapping as keyfunc_mapping",
        "from .mapped_collection import KeyFuncDict as KeyFuncDict",
        "from .mapped_collection import mapped_collection as mapped_collection",
        "from .mapped_collection import MappedCollection as MappedCollection",
        "from .mapper import configure_mappers as configure_mappers",
        "from .mapper import Mapper as Mapper",
        "from .mapper import reconstructor as reconstructor",
        "from .mapper import validates as validates",
        "from .properties import ColumnProperty as ColumnProperty",
        "from .properties import MappedColumn as MappedColumn",
        "from .properties import MappedSQLExpression as MappedSQLExpression",
        "from .query import AliasOption as AliasOption",
        "from .query import Query as Query",
        "from .relationships import foreign as foreign",
        "from .relationships import Relationship as Relationship",
        "from .relationships import RelationshipProperty as RelationshipProperty",
        "from .relationships import remote as remote",
        "from .scoping import QueryPropertyDescriptor as QueryPropertyDescriptor",
        "from .scoping import scoped_session as scoped_session",
        "from .session import close_all_sessions as close_all_sessions",
        "from .session import make_transient as make_transient",
        "from .session import make_transient_to_detached as make_transient_to_detached",
        "from .session import object_session as object_session",
        "from .session import ORMExecuteState as ORMExecuteState",
        "from .session import Session as Session",
        "from .session import sessionmaker as sessionmaker",
        "from .session import SessionTransaction as SessionTransaction",
        "from .session import SessionTransactionOrigin as SessionTransactionOrigin",
        "from .state import AttributeState as AttributeState",
        "from .state import InstanceState as InstanceState",
        "from .strategy_options import contains_eager as contains_eager",
        "from .strategy_options import defaultload as defaultload",
        "from .strategy_options import defer as defer",
        "from .strategy_options import immediateload as immediateload",
        "from .strategy_options import joinedload as joinedload",
        "from .strategy_options import lazyload as lazyload",
        "from .strategy_options import Load as Load",
        "from .strategy_options import load_only as load_only",
        "from .strategy_options import noload as noload",
        "from .strategy_options import raiseload as raiseload",
        "from .strategy_options import selectin_polymorphic as selectin_polymorphic",
        "from .strategy_options import selectinload as selectinload",
        "from .strategy_options import subqueryload as subqueryload",
        "from .strategy_options import undefer as undefer",
        "from .strategy_options import undefer_group as undefer_group",
        "from .strategy_options import with_expression as with_expression",
        "from .unitofwork import UOWTransaction as UOWTransaction",
        "from .util import Bundle as Bundle",
        "from .util import CascadeOptions as CascadeOptions",
        "from .util import LoaderCriteriaOption as LoaderCriteriaOption",
        "from .util import object_mapper as object_mapper",
        "from .util import polymorphic_union as polymorphic_union",
        "from .util import was_deleted as was_deleted",
        "from .util import with_parent as with_parent",
        "from .writeonly import WriteOnlyCollection as WriteOnlyCollection",
        "from .. import util as _sa_util"
      ],
      "estimated_loc_savings": 16,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/engine/__init__.py",
      "current_size_lines": 58,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from . import events as events",
        "from . import util as util",
        "from .base import Connection as Connection",
        "from .base import Engine as Engine",
        "from .base import NestedTransaction as NestedTransaction",
        "from .base import RootTransaction as RootTransaction",
        "from .base import Transaction as Transaction",
        "from .base import TwoPhaseTransaction as TwoPhaseTransaction",
        "from .create import create_engine as create_engine",
        "from .create import create_pool_from_url as create_pool_from_url",
        "from .create import engine_from_config as engine_from_config",
        "from .cursor import CursorResult as CursorResult",
        "from .cursor import ResultProxy as ResultProxy",
        "from .interfaces import AdaptedConnection as AdaptedConnection",
        "from .interfaces import BindTyping as BindTyping",
        "from .interfaces import Compiled as Compiled",
        "from .interfaces import Connectable as Connectable",
        "from .interfaces import ConnectArgsType as ConnectArgsType",
        "from .interfaces import ConnectionEventsTarget as ConnectionEventsTarget",
        "from .interfaces import CreateEnginePlugin as CreateEnginePlugin",
        "from .interfaces import Dialect as Dialect",
        "from .interfaces import ExceptionContext as ExceptionContext",
        "from .interfaces import ExecutionContext as ExecutionContext",
        "from .interfaces import TypeCompiler as TypeCompiler",
        "from .mock import create_mock_engine as create_mock_engine",
        "from .reflection import Inspector as Inspector",
        "from .reflection import ObjectKind as ObjectKind",
        "from .reflection import ObjectScope as ObjectScope",
        "from .result import ChunkedIteratorResult as ChunkedIteratorResult",
        "from .result import FilterResult as FilterResult",
        "from .result import FrozenResult as FrozenResult",
        "from .result import IteratorResult as IteratorResult",
        "from .result import MappingResult as MappingResult",
        "from .result import MergedResult as MergedResult",
        "from .result import Result as Result",
        "from .result import result_tuple as result_tuple",
        "from .result import ScalarResult as ScalarResult",
        "from .result import TupleResult as TupleResult",
        "from .row import BaseRow as BaseRow",
        "from .row import Row as Row",
        "from .row import RowMapping as RowMapping",
        "from .url import make_url as make_url",
        "from .url import URL as URL",
        "from .util import connection_memoize as connection_memoize",
        "from ..sql import ddl as ddl"
      ],
      "estimated_loc_savings": 8,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/pool/__init__.py",
      "current_size_lines": 39,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from . import events",
        "from .base import _AdhocProxiedConnection as _AdhocProxiedConnection",
        "from .base import _ConnectionFairy as _ConnectionFairy",
        "from .base import _ConnectionRecord",
        "from .base import _CreatorFnType as _CreatorFnType",
        "from .base import _CreatorWRecFnType as _CreatorWRecFnType",
        "from .base import _finalize_fairy",
        "from .base import _ResetStyleArgType as _ResetStyleArgType",
        "from .base import ConnectionPoolEntry as ConnectionPoolEntry",
        "from .base import ManagesConnection as ManagesConnection",
        "from .base import Pool as Pool",
        "from .base import PoolProxiedConnection as PoolProxiedConnection",
        "from .base import PoolResetState as PoolResetState",
        "from .base import reset_commit as reset_commit",
        "from .base import reset_none as reset_none",
        "from .base import reset_rollback as reset_rollback",
        "from .impl import AssertionPool as AssertionPool",
        "from .impl import AsyncAdaptedQueuePool as AsyncAdaptedQueuePool",
        "from .impl import (",
        "from .impl import NullPool as NullPool",
        "from .impl import QueuePool as QueuePool",
        "from .impl import SingletonThreadPool as SingletonThreadPool",
        "from .impl import StaticPool as StaticPool"
      ],
      "estimated_loc_savings": 11,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/event/__init__.py",
      "current_size_lines": 23,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from .api import CANCEL as CANCEL",
        "from .api import contains as contains",
        "from .api import listen as listen",
        "from .api import listens_for as listens_for",
        "from .api import NO_RETVAL as NO_RETVAL",
        "from .api import remove as remove",
        "from .attr import _InstanceLevelDispatch as _InstanceLevelDispatch",
        "from .attr import RefCollection as RefCollection",
        "from .base import _Dispatch as _Dispatch",
        "from .base import _DispatchCommon as _DispatchCommon",
        "from .base import dispatcher as dispatcher",
        "from .base import Events as Events",
        "from .legacy import _legacy_signature as _legacy_signature",
        "from .registry import _EventKey as _EventKey",
        "from .registry import _ListenerFnType as _ListenerFnType",
        "from .registry import EventTarget as EventTarget"
      ],
      "estimated_loc_savings": 2,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/future/__init__.py",
      "current_size_lines": 13,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from .engine import Connection as Connection",
        "from .engine import create_engine as create_engine",
        "from .engine import Engine as Engine",
        "from ..sql._selectable_constructors import select as select"
      ],
      "estimated_loc_savings": 4,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/sql/__init__.py",
      "current_size_lines": 135,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from ._typing import ColumnExpressionArgument as ColumnExpressionArgument",
        "from ._typing import NotNullable as NotNullable",
        "from ._typing import Nullable as Nullable",
        "from .base import Executable as Executable",
        "from .compiler import COLLECT_CARTESIAN_PRODUCTS as COLLECT_CARTESIAN_PRODUCTS",
        "from .compiler import FROM_LINTING as FROM_LINTING",
        "from .compiler import NO_LINTING as NO_LINTING",
        "from .compiler import WARN_LINTING as WARN_LINTING",
        "from .ddl import BaseDDLElement as BaseDDLElement",
        "from .ddl import DDL as DDL",
        "from .ddl import DDLElement as DDLElement",
        "from .ddl import ExecutableDDLElement as ExecutableDDLElement",
        "from .expression import Alias as Alias",
        "from .expression import alias as alias",
        "from .expression import all_ as all_",
        "from .expression import and_ as and_",
        "from .expression import any_ as any_",
        "from .expression import asc as asc",
        "from .expression import between as between",
        "from .expression import bindparam as bindparam",
        "from .expression import case as case",
        "from .expression import cast as cast",
        "from .expression import ClauseElement as ClauseElement",
        "from .expression import collate as collate",
        "from .expression import column as column",
        "from .expression import ColumnCollection as ColumnCollection",
        "from .expression import ColumnElement as ColumnElement",
        "from .expression import CompoundSelect as CompoundSelect",
        "from .expression import cte as cte",
        "from .expression import Delete as Delete",
        "from .expression import delete as delete",
        "from .expression import desc as desc",
        "from .expression import distinct as distinct",
        "from .expression import except_ as except_",
        "from .expression import except_all as except_all",
        "from .expression import exists as exists",
        "from .expression import extract as extract",
        "from .expression import false as false",
        "from .expression import False_ as False_",
        "from .expression import FromClause as FromClause",
        "from .expression import func as func",
        "from .expression import funcfilter as funcfilter",
        "from .expression import Insert as Insert",
        "from .expression import insert as insert",
        "from .expression import intersect as intersect",
        "from .expression import intersect_all as intersect_all",
        "from .expression import Join as Join",
        "from .expression import join as join",
        "from .expression import label as label",
        "from .expression import LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT",
        "from .expression import (",
        "from .expression import LABEL_STYLE_NONE as LABEL_STYLE_NONE",
        "from .expression import (",
        "from .expression import lambda_stmt as lambda_stmt",
        "from .expression import LambdaElement as LambdaElement",
        "from .expression import lateral as lateral",
        "from .expression import literal as literal",
        "from .expression import literal_column as literal_column",
        "from .expression import modifier as modifier",
        "from .expression import not_ as not_",
        "from .expression import null as null",
        "from .expression import nulls_first as nulls_first",
        "from .expression import nulls_last as nulls_last",
        "from .expression import nullsfirst as nullsfirst",
        "from .expression import nullslast as nullslast",
        "from .expression import or_ as or_",
        "from .expression import outerjoin as outerjoin",
        "from .expression import outparam as outparam",
        "from .expression import over as over",
        "from .expression import quoted_name as quoted_name",
        "from .expression import Select as Select",
        "from .expression import select as select",
        "from .expression import Selectable as Selectable",
        "from .expression import SelectLabelStyle as SelectLabelStyle",
        "from .expression import SQLColumnExpression as SQLColumnExpression",
        "from .expression import StatementLambdaElement as StatementLambdaElement",
        "from .expression import Subquery as Subquery",
        "from .expression import table as table",
        "from .expression import TableClause as TableClause",
        "from .expression import TableSample as TableSample",
        "from .expression import tablesample as tablesample",
        "from .expression import text as text",
        "from .expression import true as true",
        "from .expression import True_ as True_",
        "from .expression import try_cast as try_cast",
        "from .expression import tuple_ as tuple_",
        "from .expression import type_coerce as type_coerce",
        "from .expression import union as union",
        "from .expression import union_all as union_all",
        "from .expression import Update as Update",
        "from .expression import update as update",
        "from .expression import Values as Values",
        "from .expression import values as values",
        "from .expression import within_group as within_group",
        "from .visitors import ClauseVisitor as ClauseVisitor",
        "    from .. import util as _sa_util",
        "    from . import base",
        "    from . import coercions",
        "    from . import elements",
        "    from . import lambdas",
        "    from . import selectable",
        "    from . import schema",
        "    from . import traversals",
        "    from . import type_api",
        "    from .annotation import _prepare_annotations",
        "    from .annotation import Annotated",
        "    from .elements import AnnotatedColumnElement",
        "    from .elements import ClauseList",
        "    from .selectable import AnnotatedFromClause"
      ],
      "estimated_loc_savings": 21,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/ext/mypy/__init__.py",
      "current_size_lines": 6,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 1,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/ext/declarative/__init__.py",
      "current_size_lines": 53,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .extensions import AbstractConcreteBase",
        "from .extensions import ConcreteBase",
        "from .extensions import DeferredReflection",
        "from ... import util",
        "from ...orm.decl_api import as_declarative as _as_declarative",
        "from ...orm.decl_api import declarative_base as _declarative_base",
        "from ...orm.decl_api import DeclarativeMeta",
        "from ...orm.decl_api import declared_attr",
        "from ...orm.decl_api import has_inherited_table as _has_inherited_table",
        "from ...orm.decl_api import synonym_for as _synonym_for",
        "__all__ = ["
      ],
      "estimated_loc_savings": 37,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/ext/asyncio/__init__.py",
      "current_size_lines": 24,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from .engine import async_engine_from_config as async_engine_from_config",
        "from .engine import AsyncConnection as AsyncConnection",
        "from .engine import AsyncEngine as AsyncEngine",
        "from .engine import AsyncTransaction as AsyncTransaction",
        "from .engine import create_async_engine as create_async_engine",
        "from .engine import create_async_pool_from_url as create_async_pool_from_url",
        "from .result import AsyncMappingResult as AsyncMappingResult",
        "from .result import AsyncResult as AsyncResult",
        "from .result import AsyncScalarResult as AsyncScalarResult",
        "from .result import AsyncTupleResult as AsyncTupleResult",
        "from .scoping import async_scoped_session as async_scoped_session",
        "from .session import async_object_session as async_object_session",
        "from .session import async_session as async_session",
        "from .session import async_sessionmaker as async_sessionmaker",
        "from .session import AsyncAttrs as AsyncAttrs",
        "from .session import AsyncSession as AsyncSession",
        "from .session import AsyncSessionTransaction as AsyncSessionTransaction",
        "from .session import close_all_sessions as close_all_sessions"
      ],
      "estimated_loc_savings": 1,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/testing/plugin/__init__.py",
      "current_size_lines": 6,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 1,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/testing/fixtures/__init__.py",
      "current_size_lines": 28,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from .base import FutureEngineMixin as FutureEngineMixin",
        "from .base import TestBase as TestBase",
        "from .mypy import MypyTest as MypyTest",
        "from .orm import after_test as after_test",
        "from .orm import close_all_sessions as close_all_sessions",
        "from .orm import DeclarativeMappedTest as DeclarativeMappedTest",
        "from .orm import fixture_session as fixture_session",
        "from .orm import MappedTest as MappedTest",
        "from .orm import ORMTest as ORMTest",
        "from .orm import RemoveORMEventsGlobally as RemoveORMEventsGlobally",
        "from .orm import (",
        "from .sql import CacheKeyFixture as CacheKeyFixture",
        "from .sql import (",
        "from .sql import insertmanyvalues_fixture as insertmanyvalues_fixture",
        "from .sql import NoCache as NoCache",
        "from .sql import RemovesEvents as RemovesEvents",
        "from .sql import TablesTest as TablesTest"
      ],
      "estimated_loc_savings": 6,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/__init__.py",
      "current_size_lines": 19,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from .test_cte import *  # noqa",
        "from .test_ddl import *  # noqa",
        "from .test_deprecations import *  # noqa",
        "from .test_dialect import *  # noqa",
        "from .test_insert import *  # noqa",
        "from .test_reflection import *  # noqa",
        "from .test_results import *  # noqa",
        "from .test_rowcount import *  # noqa",
        "from .test_select import *  # noqa",
        "from .test_sequence import *  # noqa",
        "from .test_types import *  # noqa",
        "from .test_unicode_ddl import *  # noqa",
        "from .test_update_delete import *  # noqa"
      ],
      "estimated_loc_savings": 1,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/postgresql/__init__.py",
      "current_size_lines": 160,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import array as arraylib  # noqa # keep above base and other dialects",
        "from . import asyncpg  # noqa",
        "from . import base",
        "from . import pg8000  # noqa",
        "from . import psycopg  # noqa",
        "from . import psycopg2  # noqa",
        "from . import psycopg2cffi  # noqa",
        "from .array import All",
        "from .array import Any",
        "from .array import ARRAY",
        "from .array import array",
        "from .base import BIGINT",
        "from .base import BOOLEAN",
        "from .base import CHAR",
        "from .base import DATE",
        "from .base import DOMAIN",
        "from .base import DOUBLE_PRECISION",
        "from .base import FLOAT",
        "from .base import INTEGER",
        "from .base import NUMERIC",
        "from .base import REAL",
        "from .base import SMALLINT",
        "from .base import TEXT",
        "from .base import UUID",
        "from .base import VARCHAR",
        "from .dml import Insert",
        "from .dml import insert",
        "from .ext import aggregate_order_by",
        "from .ext import array_agg",
        "from .ext import ExcludeConstraint",
        "from .ext import phraseto_tsquery",
        "from .ext import plainto_tsquery",
        "from .ext import to_tsquery",
        "from .ext import to_tsvector",
        "from .ext import ts_headline",
        "from .ext import websearch_to_tsquery",
        "from .hstore import HSTORE",
        "from .hstore import hstore",
        "from .json import JSON",
        "from .json import JSONB",
        "from .json import JSONPATH",
        "from .named_types import CreateDomainType",
        "from .named_types import CreateEnumType",
        "from .named_types import DropDomainType",
        "from .named_types import DropEnumType",
        "from .named_types import ENUM",
        "from .named_types import NamedType",
        "from .ranges import AbstractMultiRange",
        "from .ranges import AbstractRange",
        "from .ranges import AbstractSingleRange",
        "from .ranges import DATEMULTIRANGE",
        "from .ranges import DATERANGE",
        "from .ranges import INT4MULTIRANGE",
        "from .ranges import INT4RANGE",
        "from .ranges import INT8MULTIRANGE",
        "from .ranges import INT8RANGE",
        "from .ranges import MultiRange",
        "from .ranges import NUMMULTIRANGE",
        "from .ranges import NUMRANGE",
        "from .ranges import Range",
        "from .ranges import TSMULTIRANGE",
        "from .ranges import TSRANGE",
        "from .ranges import TSTZMULTIRANGE",
        "from .ranges import TSTZRANGE",
        "from .types import BIT",
        "from .types import BYTEA",
        "from .types import CIDR",
        "from .types import CITEXT",
        "from .types import INET",
        "from .types import INTERVAL",
        "from .types import MACADDR",
        "from .types import MACADDR8",
        "from .types import MONEY",
        "from .types import OID",
        "from .types import REGCLASS",
        "from .types import REGCONFIG",
        "from .types import TIME",
        "from .types import TIMESTAMP",
        "from .types import TSQUERY",
        "from .types import TSVECTOR",
        "__all__ = ("
      ],
      "estimated_loc_savings": 74,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/oracle/__init__.py",
      "current_size_lines": 77,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import base  # noqa",
        "from . import cx_oracle  # noqa",
        "from . import oracledb  # noqa",
        "from .base import BFILE",
        "from .base import BINARY_DOUBLE",
        "from .base import BINARY_FLOAT",
        "from .base import BLOB",
        "from .base import CHAR",
        "from .base import CLOB",
        "from .base import DATE",
        "from .base import DOUBLE_PRECISION",
        "from .base import FLOAT",
        "from .base import INTERVAL",
        "from .base import LONG",
        "from .base import NCHAR",
        "from .base import NCLOB",
        "from .base import NUMBER",
        "from .base import NVARCHAR",
        "from .base import NVARCHAR2",
        "from .base import RAW",
        "from .base import REAL",
        "from .base import ROWID",
        "from .base import TIMESTAMP",
        "from .base import VARCHAR",
        "from .base import VARCHAR2",
        "from .base import VECTOR",
        "from .base import VectorIndexConfig",
        "from .base import VectorIndexType",
        "from .vector import SparseVector",
        "from .vector import VectorDistanceType",
        "from .vector import VectorStorageFormat",
        "from .vector import VectorStorageType",
        "__all__ = ("
      ],
      "estimated_loc_savings": 39,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/__init__.py",
      "current_size_lines": 52,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import aiosqlite  # noqa",
        "from . import base  # noqa",
        "from . import pysqlcipher  # noqa",
        "from . import pysqlite  # noqa",
        "from .base import BLOB",
        "from .base import BOOLEAN",
        "from .base import CHAR",
        "from .base import DATE",
        "from .base import DATETIME",
        "from .base import DECIMAL",
        "from .base import FLOAT",
        "from .base import INTEGER",
        "from .base import JSON",
        "from .base import NUMERIC",
        "from .base import REAL",
        "from .base import SMALLINT",
        "from .base import TEXT",
        "from .base import TIME",
        "from .base import TIMESTAMP",
        "from .base import VARCHAR",
        "from .dml import Insert",
        "from .dml import insert",
        "__all__ = ("
      ],
      "estimated_loc_savings": 24,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/mysql/__init__.py",
      "current_size_lines": 100,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import aiomysql  # noqa",
        "from . import asyncmy  # noqa",
        "from . import base  # noqa",
        "from . import cymysql  # noqa",
        "from . import mariadbconnector  # noqa",
        "from . import mysqlconnector  # noqa",
        "from . import mysqldb  # noqa",
        "from . import pymysql  # noqa",
        "from . import pyodbc  # noqa",
        "from .base import BIGINT",
        "from .base import BINARY",
        "from .base import BIT",
        "from .base import BLOB",
        "from .base import BOOLEAN",
        "from .base import CHAR",
        "from .base import DATE",
        "from .base import DATETIME",
        "from .base import DECIMAL",
        "from .base import DOUBLE",
        "from .base import ENUM",
        "from .base import FLOAT",
        "from .base import INTEGER",
        "from .base import JSON",
        "from .base import LONGBLOB",
        "from .base import LONGTEXT",
        "from .base import MEDIUMBLOB",
        "from .base import MEDIUMINT",
        "from .base import MEDIUMTEXT",
        "from .base import NCHAR",
        "from .base import NUMERIC",
        "from .base import NVARCHAR",
        "from .base import REAL",
        "from .base import SET",
        "from .base import SMALLINT",
        "from .base import TEXT",
        "from .base import TIME",
        "from .base import TIMESTAMP",
        "from .base import TINYBLOB",
        "from .base import TINYINT",
        "from .base import TINYTEXT",
        "from .base import VARBINARY",
        "from .base import VARCHAR",
        "from .base import YEAR",
        "from .dml import Insert",
        "from .dml import insert",
        "from .expression import match",
        "from .mariadb import INET4",
        "from .mariadb import INET6",
        "__all__ = ("
      ],
      "estimated_loc_savings": 46,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/mssql/__init__.py",
      "current_size_lines": 83,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import aioodbc  # noqa",
        "from . import base  # noqa",
        "from . import pymssql  # noqa",
        "from . import pyodbc  # noqa",
        "from .base import BIGINT",
        "from .base import BINARY",
        "from .base import BIT",
        "from .base import CHAR",
        "from .base import DATE",
        "from .base import DATETIME",
        "from .base import DATETIME2",
        "from .base import DATETIMEOFFSET",
        "from .base import DECIMAL",
        "from .base import DOUBLE_PRECISION",
        "from .base import FLOAT",
        "from .base import IMAGE",
        "from .base import INTEGER",
        "from .base import JSON",
        "from .base import MONEY",
        "from .base import NCHAR",
        "from .base import NTEXT",
        "from .base import NUMERIC",
        "from .base import NVARCHAR",
        "from .base import REAL",
        "from .base import ROWVERSION",
        "from .base import SMALLDATETIME",
        "from .base import SMALLINT",
        "from .base import SMALLMONEY",
        "from .base import SQL_VARIANT",
        "from .base import TEXT",
        "from .base import TIME",
        "from .base import TIMESTAMP",
        "from .base import TINYINT",
        "from .base import UNIQUEIDENTIFIER",
        "from .base import VARBINARY",
        "from .base import VARCHAR",
        "from .base import XML",
        "from ...sql import try_cast",
        "__all__ = ("
      ],
      "estimated_loc_savings": 39,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/shellingham/posix/__init__.py",
      "current_size_lines": 95,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from .._core import SHELL_NAMES, ShellDetectionFailure",
        "from . import proc, ps"
      ],
      "estimated_loc_savings": 88,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/bandit/core/__init__.py",
      "current_size_lines": 15,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 10,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/bandit/plugins/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/bandit/formatters/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/bandit/cli/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/bandit/blacklists/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/_utils/__init__.py",
      "current_size_lines": 79,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from ._convertions import asbytes, asunicode"
      ],
      "estimated_loc_savings": 73,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/strings/__init__.py",
      "current_size_lines": 2,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from numpy._core.strings import __all__, __doc__"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/char/__init__.py",
      "current_size_lines": 2,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from numpy._core.defchararray import __all__, __doc__"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/core/__init__.py",
      "current_size_lines": 26,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from ._utils import _raise_warning",
        "__all__ = [\"arrayprint\", \"defchararray\", \"_dtype_ctypes\", \"_dtype\",  # noqa: F822"
      ],
      "estimated_loc_savings": 19,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/linalg/__init__.py",
      "current_size_lines": 75,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import (",
        "from ._linalg import *",
        "__all__ = _linalg.__all__.copy()  # noqa: PLE0605"
      ],
      "estimated_loc_savings": 67,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/ctypeslib/__init__.py",
      "current_size_lines": 13,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from ._ctypeslib import (",
        "    __all__,"
      ],
      "estimated_loc_savings": 6,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/ma/__init__.py",
      "current_size_lines": 38,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import core, extras",
        "from .core import *",
        "from .extras import *",
        "__all__ = ['core', 'extras']",
        "__all__ += core.__all__",
        "__all__ += extras.__all__"
      ],
      "estimated_loc_savings": 27,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/_core/__init__.py",
      "current_size_lines": 148,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from numpy.version import version as __version__",
        "    from . import multiarray",
        "        __version__, exc)",
        "from . import umath",
        "from . import numerictypes as nt",
        "from .numerictypes import sctypeDict, sctypes",
        "from . import (",
        "from .einsumfunc import *",
        "from .fromnumeric import *",
        "from .function_base import *",
        "from .getlimits import *",
        "from .memmap import *",
        "from .numeric import *",
        "from .records import recarray, record",
        "from .shape_base import *",
        "from . import (",
        "from .numeric import absolute as abs",
        "__all__ = [",
        "__all__ += numeric.__all__",
        "__all__ += function_base.__all__",
        "__all__ += getlimits.__all__",
        "__all__ += shape_base.__all__",
        "__all__ += einsumfunc.__all__"
      ],
      "estimated_loc_savings": 120,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/_typing/__init__.py",
      "current_size_lines": 139,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [
        "from ._array_like import ArrayLike as ArrayLike",
        "from ._array_like import NDArray as NDArray",
        "from ._array_like import _ArrayLike as _ArrayLike",
        "from ._array_like import _ArrayLikeAnyString_co as _ArrayLikeAnyString_co",
        "from ._array_like import _ArrayLikeBool_co as _ArrayLikeBool_co",
        "from ._array_like import _ArrayLikeBytes_co as _ArrayLikeBytes_co",
        "from ._array_like import _ArrayLikeComplex128_co as _ArrayLikeComplex128_co",
        "from ._array_like import _ArrayLikeComplex_co as _ArrayLikeComplex_co",
        "from ._array_like import _ArrayLikeDT64_co as _ArrayLikeDT64_co",
        "from ._array_like import _ArrayLikeFloat64_co as _ArrayLikeFloat64_co",
        "from ._array_like import _ArrayLikeFloat_co as _ArrayLikeFloat_co",
        "from ._array_like import _ArrayLikeInt as _ArrayLikeInt",
        "from ._array_like import _ArrayLikeInt_co as _ArrayLikeInt_co",
        "from ._array_like import _ArrayLikeNumber_co as _ArrayLikeNumber_co",
        "from ._array_like import _ArrayLikeObject_co as _ArrayLikeObject_co",
        "from ._array_like import _ArrayLikeStr_co as _ArrayLikeStr_co",
        "from ._array_like import _ArrayLikeString_co as _ArrayLikeString_co",
        "from ._array_like import _ArrayLikeTD64_co as _ArrayLikeTD64_co",
        "from ._array_like import _ArrayLikeUInt_co as _ArrayLikeUInt_co",
        "from ._array_like import _ArrayLikeVoid_co as _ArrayLikeVoid_co",
        "from ._array_like import _FiniteNestedSequence as _FiniteNestedSequence",
        "from ._array_like import _SupportsArray as _SupportsArray",
        "from ._array_like import _SupportsArrayFunc as _SupportsArrayFunc",
        "from ._char_codes import _BoolCodes as _BoolCodes",
        "from ._char_codes import _ByteCodes as _ByteCodes",
        "from ._char_codes import _BytesCodes as _BytesCodes",
        "from ._char_codes import _CDoubleCodes as _CDoubleCodes",
        "from ._char_codes import _CharacterCodes as _CharacterCodes",
        "from ._char_codes import _CLongDoubleCodes as _CLongDoubleCodes",
        "from ._char_codes import _Complex64Codes as _Complex64Codes",
        "from ._char_codes import _Complex128Codes as _Complex128Codes",
        "from ._char_codes import _ComplexFloatingCodes as _ComplexFloatingCodes",
        "from ._char_codes import _CSingleCodes as _CSingleCodes",
        "from ._char_codes import _DoubleCodes as _DoubleCodes",
        "from ._char_codes import _DT64Codes as _DT64Codes",
        "from ._char_codes import _FlexibleCodes as _FlexibleCodes",
        "from ._char_codes import _Float16Codes as _Float16Codes",
        "from ._char_codes import _Float32Codes as _Float32Codes",
        "from ._char_codes import _Float64Codes as _Float64Codes",
        "from ._char_codes import _FloatingCodes as _FloatingCodes",
        "from ._char_codes import _GenericCodes as _GenericCodes",
        "from ._char_codes import _HalfCodes as _HalfCodes",
        "from ._char_codes import _InexactCodes as _InexactCodes",
        "from ._char_codes import _Int8Codes as _Int8Codes",
        "from ._char_codes import _Int16Codes as _Int16Codes",
        "from ._char_codes import _Int32Codes as _Int32Codes",
        "from ._char_codes import _Int64Codes as _Int64Codes",
        "from ._char_codes import _IntCCodes as _IntCCodes",
        "from ._char_codes import _IntCodes as _IntCodes",
        "from ._char_codes import _IntegerCodes as _IntegerCodes",
        "from ._char_codes import _IntPCodes as _IntPCodes",
        "from ._char_codes import _LongCodes as _LongCodes",
        "from ._char_codes import _LongDoubleCodes as _LongDoubleCodes",
        "from ._char_codes import _LongLongCodes as _LongLongCodes",
        "from ._char_codes import _NumberCodes as _NumberCodes",
        "from ._char_codes import _ObjectCodes as _ObjectCodes",
        "from ._char_codes import _ShortCodes as _ShortCodes",
        "from ._char_codes import _SignedIntegerCodes as _SignedIntegerCodes",
        "from ._char_codes import _SingleCodes as _SingleCodes",
        "from ._char_codes import _StrCodes as _StrCodes",
        "from ._char_codes import _StringCodes as _StringCodes",
        "from ._char_codes import _TD64Codes as _TD64Codes",
        "from ._char_codes import _UByteCodes as _UByteCodes",
        "from ._char_codes import _UInt8Codes as _UInt8Codes",
        "from ._char_codes import _UInt16Codes as _UInt16Codes",
        "from ._char_codes import _UInt32Codes as _UInt32Codes",
        "from ._char_codes import _UInt64Codes as _UInt64Codes",
        "from ._char_codes import _UIntCCodes as _UIntCCodes",
        "from ._char_codes import _UIntCodes as _UIntCodes",
        "from ._char_codes import _UIntPCodes as _UIntPCodes",
        "from ._char_codes import _ULongCodes as _ULongCodes",
        "from ._char_codes import _ULongLongCodes as _ULongLongCodes",
        "from ._char_codes import _UnsignedIntegerCodes as _UnsignedIntegerCodes",
        "from ._char_codes import _UShortCodes as _UShortCodes",
        "from ._char_codes import _VoidCodes as _VoidCodes",
        "from ._dtype_like import DTypeLike as DTypeLike",
        "from ._dtype_like import _DTypeLike as _DTypeLike",
        "from ._dtype_like import _DTypeLikeBool as _DTypeLikeBool",
        "from ._dtype_like import _DTypeLikeBytes as _DTypeLikeBytes",
        "from ._dtype_like import _DTypeLikeComplex as _DTypeLikeComplex",
        "from ._dtype_like import _DTypeLikeComplex_co as _DTypeLikeComplex_co",
        "from ._dtype_like import _DTypeLikeDT64 as _DTypeLikeDT64",
        "from ._dtype_like import _DTypeLikeFloat as _DTypeLikeFloat",
        "from ._dtype_like import _DTypeLikeInt as _DTypeLikeInt",
        "from ._dtype_like import _DTypeLikeObject as _DTypeLikeObject",
        "from ._dtype_like import _DTypeLikeStr as _DTypeLikeStr",
        "from ._dtype_like import _DTypeLikeTD64 as _DTypeLikeTD64",
        "from ._dtype_like import _DTypeLikeUInt as _DTypeLikeUInt",
        "from ._dtype_like import _DTypeLikeVoid as _DTypeLikeVoid",
        "from ._dtype_like import _SupportsDType as _SupportsDType",
        "from ._dtype_like import _VoidDTypeLike as _VoidDTypeLike",
        "from ._nbit import _NBitByte as _NBitByte",
        "from ._nbit import _NBitDouble as _NBitDouble",
        "from ._nbit import _NBitHalf as _NBitHalf",
        "from ._nbit import _NBitInt as _NBitInt",
        "from ._nbit import _NBitIntC as _NBitIntC",
        "from ._nbit import _NBitIntP as _NBitIntP",
        "from ._nbit import _NBitLong as _NBitLong",
        "from ._nbit import _NBitLongDouble as _NBitLongDouble",
        "from ._nbit import _NBitLongLong as _NBitLongLong",
        "from ._nbit import _NBitShort as _NBitShort",
        "from ._nbit import _NBitSingle as _NBitSingle",
        "from ._nbit_base import (",
        "from ._nbit_base import _8Bit as _8Bit",
        "from ._nbit_base import _16Bit as _16Bit",
        "from ._nbit_base import _32Bit as _32Bit",
        "from ._nbit_base import _64Bit as _64Bit",
        "from ._nbit_base import _96Bit as _96Bit",
        "from ._nbit_base import _128Bit as _128Bit",
        "from ._nested_sequence import _NestedSequence as _NestedSequence",
        "from ._scalars import _BoolLike_co as _BoolLike_co",
        "from ._scalars import _CharLike_co as _CharLike_co",
        "from ._scalars import _ComplexLike_co as _ComplexLike_co",
        "from ._scalars import _FloatLike_co as _FloatLike_co",
        "from ._scalars import _IntLike_co as _IntLike_co",
        "from ._scalars import _NumberLike_co as _NumberLike_co",
        "from ._scalars import _ScalarLike_co as _ScalarLike_co",
        "from ._scalars import _TD64Like_co as _TD64Like_co",
        "from ._scalars import _UIntLike_co as _UIntLike_co",
        "from ._scalars import _VoidLike_co as _VoidLike_co",
        "from ._shape import _AnyShape as _AnyShape",
        "from ._shape import _Shape as _Shape",
        "from ._shape import _ShapeLike as _ShapeLike",
        "from ._ufunc import _GUFunc_Nin2_Nout1 as _GUFunc_Nin2_Nout1",
        "from ._ufunc import _UFunc_Nin1_Nout1 as _UFunc_Nin1_Nout1",
        "from ._ufunc import _UFunc_Nin1_Nout2 as _UFunc_Nin1_Nout2",
        "from ._ufunc import _UFunc_Nin2_Nout1 as _UFunc_Nin2_Nout1",
        "from ._ufunc import _UFunc_Nin2_Nout2 as _UFunc_Nin2_Nout2"
      ],
      "estimated_loc_savings": 6,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/tests/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/_pyinstaller/__init__.py",
      "current_size_lines": 0,
      "has_imports": false,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/rec/__init__.py",
      "current_size_lines": 2,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from numpy._core.records import __all__, __doc__"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    }
  ],
  "estimated_loc_savings": 825,
  "file_count": 50
}