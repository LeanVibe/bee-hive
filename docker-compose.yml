version: '3.8'

services:
  # PostgreSQL Database with Vector Extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: leanvibe_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-leanvibe_agent_hive}
      POSTGRES_USER: ${POSTGRES_USER:-leanvibe_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-leanvibe_secure_pass}
      POSTGRES_HOST_AUTH_METHOD: md5
      # Performance optimizations for development
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
      # PostgreSQL configuration optimizations
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - leanvibe_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-leanvibe_user} -d ${POSTGRES_DB:-leanvibe_agent_hive}"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # Development-friendly resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for Caching and Message Broker
  redis:
    image: redis:7-alpine
    container_name: leanvibe_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-leanvibe_redis_pass}
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    networks:
      - leanvibe_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-leanvibe_redis_pass}", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # FastAPI Backend Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - PYTHON_VERSION=${PYTHON_VERSION:-3.12}
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
        - VERSION=${APP_VERSION:-2.0.0}
    container_name: leanvibe_api
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-leanvibe_user}:${POSTGRES_PASSWORD:-leanvibe_secure_pass}@postgres:5432/${POSTGRES_DB:-leanvibe_agent_hive}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-leanvibe_redis_pass}@redis:6379/0
      # AI Service Configuration
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL:-claude-3-5-sonnet-20241022}
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY:-leanvibe_super_secret_key_change_in_production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-CHANGE_THIS_TO_SECURE_RANDOM_KEY_MINIMUM_64_CHARS}
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-true}
      - APP_NAME=${APP_NAME:-LeanVibe Agent Hive}
      - APP_VERSION=${APP_VERSION:-2.0.0}
      # CORS Configuration
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3001,http://localhost:8080,http://localhost:3000}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,api}
      # Development Features
      - ENABLE_HOT_RELOAD=${ENABLE_HOT_RELOAD:-true}
      - ENABLE_DEBUG_TOOLBAR=${ENABLE_DEBUG_TOOLBAR:-true}
      - SKIP_STARTUP_INIT=${SKIP_STARTUP_INIT:-false}
      # WebSocket Configuration
      - WS_AUTH_REQUIRED=${WS_AUTH_REQUIRED:-false}
      - WS_AUTH_MODE=${WS_AUTH_MODE:-token}
      - WS_AUTH_TOKEN=${WS_AUTH_TOKEN:-dev-token-change-me}
      # Feature Flags
      - ENABLE_WEBAUTHN=${ENABLE_WEBAUTHN:-true}
      - ENABLE_GITHUB_INTEGRATION=${ENABLE_GITHUB_INTEGRATION:-true}
      - ENABLE_ENTERPRISE_TEMPLATES=${ENABLE_ENTERPRISE_TEMPLATES:-false}
      # Monitoring
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      - PERFORMANCE_MONITORING_ENABLED=${PERFORMANCE_MONITORING_ENABLED:-true}
    ports:
      - "${MAIN_API_PORT:-8100}:8000"
      - "${API_DEBUG_PORT:-5678}:5678"  # Debug port for IDE attachment
    volumes:
      # Source code hot-reload for development
      - .:/app:cached
      - /var/run/docker.sock:/var/run/docker.sock  # For tmux session management
      - agent_workspaces:/app/workspaces
      - ./logs:/app/logs  # Development log persistence
      # Exclude node_modules and other cache directories for performance
      - /app/node_modules
      - /app/.pytest_cache
      - /app/__pycache__
      - /app/.mypy_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - leanvibe_network
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "User-Agent: Docker-Healthcheck", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    # Development command with hot reload and debugging
    command: >
      sh -c "
        echo 'Starting LeanVibe Agent Hive API in development mode...' &&
        python -m pip install --no-deps -e . &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
      "

  # Frontend PWA Development Server
  frontend:
    build:
      context: ./mobile-pwa
      dockerfile: Dockerfile.dev
    container_name: leanvibe_frontend_dev
    environment:
      # API Configuration
      - API_BASE_URL=http://api:8000
      - VITE_API_BASE_URL=http://localhost:${MAIN_API_PORT:-8100}
      - VITE_WS_URL=ws://localhost:${MAIN_API_PORT:-8100}/api/dashboard/ws/dashboard
      # Development Configuration
      - NODE_ENV=development
      - VITE_APP_TITLE=LeanVibe Agent Hive - Dev
      - VITE_APP_VERSION=${APP_VERSION:-2.0.0}
      # Feature Flags
      - VITE_ENABLE_MOCK_DATA=${ENABLE_MOCK_DATA:-false}
      - VITE_ENABLE_DEBUG=${DEBUG:-true}
      # Authentication
      - VITE_AUTH_REQUIRED=${WS_AUTH_REQUIRED:-false}
      - VITE_AUTH_TOKEN=${WS_AUTH_TOKEN:-dev-token-change-me}
    ports:
      - "${DASHBOARD_PORT:-3001}:3000"
      - "${FRONTEND_HMR_PORT:-24678}:24678"  # Vite HMR port
    volumes:
      # Source code hot-reload for development
      - ./mobile-pwa:/app:cached
      - /app/node_modules  # Prevent host node_modules from overriding container's
      - /app/dist
      - /app/.vite
    depends_on:
      - api
    networks:
      - leanvibe_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - development
    # Development command with HMR
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm ci --silent &&
        echo 'Starting Vite development server...' &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: leanvibe_nginx
    ports:
      - "${NGINX_HTTP_PORT:-8000}:80"
      - "${NGINX_HTTPS_PORT:-8443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/usr/share/nginx/html
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - leanvibe_network
    profiles:
      - production
    restart: unless-stopped

  # Redis Commander for Redis Management (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: leanvibe_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-leanvibe_redis_pass}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8201}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - development
      - tools
    restart: unless-stopped

  # Redis Insight for Advanced Redis Management (Development)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: leanvibe_redis_insight
    ports:
      - "${REDIS_INSIGHT_PORT:-8202}:8001"
    depends_on:
      - redis
    networks:
      - leanvibe_network
    profiles:
      - development
      - tools
    restart: unless-stopped

  # pgAdmin for PostgreSQL Management (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: leanvibe_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@leanvibe.dev}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-5150}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/servers.json:/pgadmin4/servers.json:ro  # Pre-configured server connections
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - development
      - tools
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer - Lightweight Database Management Alternative
  adminer:
    image: adminer:latest
    container_name: leanvibe_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: hydra
    ports:
      - "${ADMINER_PORT:-8203}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - development
      - tools
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: leanvibe_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/monitoring/recording_rules.yml:/etc/prometheus/recording_rules.yml
      - ./infrastructure/monitoring/alertmanager:/etc/prometheus/alertmanager
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--storage.tsdb.wal-compression'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - leanvibe_network
    profiles:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager for Alert Routing and Notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: leanvibe_alertmanager
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - ./infrastructure/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./infrastructure/monitoring/templates:/etc/alertmanager/templates
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
    networks:
      - leanvibe_network
    profiles:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: leanvibe_grafana
    ports:
      - "${GRAFANA_PORT:-3101}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./infrastructure/monitoring/grafana/plugins:/var/lib/grafana/plugins
    depends_on:
      - prometheus
    networks:
      - leanvibe_network
    profiles:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter for Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: leanvibe_postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://leanvibe_user:${POSTGRES_PASSWORD:-leanvibe_secure_pass}@postgres:5432/leanvibe_agent_hive?sslmode=disable
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter for Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: leanvibe_redis_exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-leanvibe_redis_pass}
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: leanvibe_cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${CADVISOR_PORT:-8180}:8080"
    networks:
      - leanvibe_network
    profiles:
      - monitoring
    restart: unless-stopped
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: leanvibe_node_exporter
    pid: host
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    networks:
      - leanvibe_network
    profiles:
      - monitoring

  # ELK Stack for Log Aggregation - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: leanvibe_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - leanvibe_network
    profiles:
      - logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: leanvibe_logstash
    volumes:
      - ./infrastructure/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./infrastructure/logging/templates:/usr/share/logstash/templates
    ports:
      - "${LOGSTASH_BEATS_PORT:-5044}:5044"
      - "${LOGSTASH_TCP_PORT:-5000}:5000/tcp"
      - "${LOGSTASH_TCP_PORT:-5000}:5000/udp"
      - "${LOGSTASH_API_PORT:-9600}:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - logging
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: leanvibe_kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - logging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q '\"overall\":{\"level\":\"available\"'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jupyter Notebook for Data Analysis and Experimentation
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: leanvibe_jupyter
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    environment:
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-leanvibe_jupyter_token}
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./analysis:/home/jovyan/analysis:ro  # Analysis scripts
      - jupyter_data:/home/jovyan
    networks:
      - leanvibe_network
    profiles:
      - development
      - analysis
    restart: unless-stopped
    command: start-notebook.sh --NotebookApp.token='${JUPYTER_TOKEN:-leanvibe_jupyter_token}' --NotebookApp.password=''

  # Testing Environment
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: leanvibe_test_runner
    environment:
      # Test Database Configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-leanvibe_user}:${POSTGRES_PASSWORD:-leanvibe_secure_pass}@postgres:5432/${POSTGRES_DB:-leanvibe_agent_hive}_test
      - REDIS_URL=redis://:${REDIS_PASSWORD:-leanvibe_redis_pass}@redis:6379/1
      # Test Configuration
      - ENVIRONMENT=testing
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - SKIP_STARTUP_INIT=true
      # Performance
      - PYTEST_XDIST_WORKERS=${PYTEST_WORKERS:-4}
    volumes:
      - .:/app:cached
      - ./test-results:/app/test-results
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - leanvibe_network
    profiles:
      - testing
    command: >
      sh -c "
        echo 'Setting up test environment...' &&
        python -m pip install --no-deps -e . &&
        echo 'Running tests...' &&
        pytest --cov=app --cov-report=html --cov-report=xml --junitxml=test-results/junit.xml -v
      "

networks:
  leanvibe_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  jupyter_data:
    driver: local
  agent_workspaces:
    driver: local

# Health check for the entire stack
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s
