/**
 * Login Page Component for RealWorld Conduit
 * Generated by LeanVibe Agent Hive 2.0 Frontend Specialist
 */

import React, { useState, useContext } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { LoginCredentials } from '../types';
import { AuthService } from '../services/api';
import { AppContext } from '../App';
import { Mail, Lock, LogIn } from 'lucide-react';

const LoginPage: React.FC = () => {
  const { setCurrentUser } = useContext(AppContext);
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');

  const {
    register,
    handleSubmit,
    formState: { errors, isValid }
  } = useForm<LoginCredentials>({
    mode: 'onChange'
  });

  const onSubmit = async (data: LoginCredentials) => {
    setIsLoading(true);
    setError('');

    try {
      const user = await AuthService.login(data);
      setCurrentUser(user);
      navigate('/');
    } catch (err: any) {
      setError(
        err.response?.data?.message || 
        'Invalid email or password. Please try again.'
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="auth-page">
      <div className="container">
        <div className="auth-container">
          <div className="auth-header">
            <h1>Welcome Back</h1>
            <p>Sign in to your RealWorld Conduit account</p>
            <p className="auth-subtitle">
              <Link to="/register">Need an account? Sign up here</Link>
            </p>
          </div>

          {error && (
            <div className="error-message">
              <p>{error}</p>
            </div>
          )}

          <form className="auth-form" onSubmit={handleSubmit(onSubmit)}>
            <div className="form-group">
              <label htmlFor="email">Email Address</label>
              <div className="input-wrapper">
                <Mail className="input-icon" size={18} />
                <input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  className={`form-control ${errors.email ? 'error' : ''}`}
                  {...register('email', {
                    required: 'Email is required',
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,
                      message: 'Invalid email address'
                    }
                  })}
                />
              </div>
              {errors.email && (
                <span className="error-text">{errors.email.message}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="password">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" size={18} />
                <input
                  id="password"
                  type="password"
                  placeholder="Enter your password"
                  className={`form-control ${errors.password ? 'error' : ''}`}
                  {...register('password', {
                    required: 'Password is required',
                    minLength: {
                      value: 6,
                      message: 'Password must be at least 6 characters'
                    }
                  })}
                />
              </div>
              {errors.password && (
                <span className="error-text">{errors.password.message}</span>
              )}
            </div>

            <button
              type="submit"
              className={`btn btn-primary btn-large ${isLoading ? 'loading' : ''}`}
              disabled={!isValid || isLoading}
            >
              {isLoading ? (
                <>
                  <div className="spinner-small"></div>
                  Signing in...
                </>
              ) : (
                <>
                  <LogIn size={18} />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="auth-demo-section">
            <h3>Demo Credentials</h3>
            <p>Try the demo with these credentials:</p>
            <div className="demo-credentials">
              <p><strong>Email:</strong> demo@realworld.com</p>
              <p><strong>Password:</strong> demo123</p>
            </div>
            <button
              type="button"
              className="btn btn-outline btn-demo"
              onClick={() => {
                const demoData = {
                  email: 'demo@realworld.com',
                  password: 'demo123'
                };
                onSubmit(demoData);
              }}
              disabled={isLoading}
            >
              Login with Demo Account
            </button>
          </div>

          <div className="auth-footer">
            <h4>About This Implementation</h4>
            <div className="implementation-details">
              <div className="detail-item">
                <strong>Generated by:</strong> LeanVibe Agent Hive 2.0
              </div>
              <div className="detail-item">
                <strong>Development Time:</strong> &lt;4 hours
              </div>
              <div className="detail-item">
                <strong>Features:</strong> JWT Auth, Form Validation, Error Handling
              </div>
              <div className="detail-item">
                <strong>Technology:</strong> React + TypeScript + React Hook Form
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;