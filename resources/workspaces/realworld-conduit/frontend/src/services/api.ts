/**
 * API Service Layer for RealWorld Conduit
 * Generated by LeanVibe Agent Hive 2.0 Frontend Specialist
 * 
 * Comprehensive API client with JWT authentication,
 * error handling, and TypeScript integration.
 */

import axios, { AxiosResponse } from 'axios';
import {
  User,
  Article,
  Comment,
  CreateArticle,
  CreateComment,
  LoginCredentials,
  RegisterCredentials,
  UpdateUser,
  ArticlesResponse,
  CommentsResponse
} from '../types';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

// Create axios instance with default configuration
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add auth token
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Response interceptor for error handling
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// Authentication Service
export const AuthService = {
  async login(credentials: LoginCredentials): Promise<User> {
    const response: AxiosResponse<{ user: User }> = await api.post('/users/login', {
      user: credentials,
    });
    const user = response.data.user;
    if (user.token) {
      localStorage.setItem('token', user.token);
    }
    return user;
  },

  async register(credentials: RegisterCredentials): Promise<User> {
    const response: AxiosResponse<{ user: User }> = await api.post('/users', {
      user: credentials,
    });
    const user = response.data.user;
    if (user.token) {
      localStorage.setItem('token', user.token);
    }
    return user;
  },

  async getCurrentUser(): Promise<User> {
    const response: AxiosResponse<{ user: User }> = await api.get('/user');
    return response.data.user;
  },

  async updateUser(userData: UpdateUser): Promise<User> {
    const response: AxiosResponse<{ user: User }> = await api.put('/user', {
      user: userData,
    });
    return response.data.user;
  },

  logout(): void {
    localStorage.removeItem('token');
  },
};

// Articles Service
export const ArticlesService = {
  async getArticles(params?: {
    tag?: string;
    author?: string;
    favorited?: string;
    limit?: number;
    offset?: number;
  }): Promise<ArticlesResponse> {
    const response: AxiosResponse<ArticlesResponse> = await api.get('/articles', {
      params,
    });
    return response.data;
  },

  async getFeedArticles(params?: {
    limit?: number;
    offset?: number;
  }): Promise<ArticlesResponse> {
    const response: AxiosResponse<ArticlesResponse> = await api.get('/articles/feed', {
      params,
    });
    return response.data;
  },

  async getArticle(slug: string): Promise<Article> {
    const response: AxiosResponse<{ article: Article }> = await api.get(`/articles/${slug}`);
    return response.data.article;
  },

  async createArticle(article: CreateArticle): Promise<Article> {
    const response: AxiosResponse<{ article: Article }> = await api.post('/articles', {
      article,
    });
    return response.data.article;
  },

  async updateArticle(slug: string, article: Partial<CreateArticle>): Promise<Article> {
    const response: AxiosResponse<{ article: Article }> = await api.put(`/articles/${slug}`, {
      article,
    });
    return response.data.article;
  },

  async deleteArticle(slug: string): Promise<void> {
    await api.delete(`/articles/${slug}`);
  },

  async favoriteArticle(slug: string): Promise<Article> {
    const response: AxiosResponse<{ article: Article }> = await api.post(`/articles/${slug}/favorite`);
    return response.data.article;
  },

  async unfavoriteArticle(slug: string): Promise<Article> {
    const response: AxiosResponse<{ article: Article }> = await api.delete(`/articles/${slug}/favorite`);
    return response.data.article;
  },
};

// Comments Service
export const CommentsService = {
  async getComments(slug: string): Promise<Comment[]> {
    const response: AxiosResponse<CommentsResponse> = await api.get(`/articles/${slug}/comments`);
    return response.data.comments;
  },

  async createComment(slug: string, comment: CreateComment): Promise<Comment> {
    const response: AxiosResponse<{ comment: Comment }> = await api.post(`/articles/${slug}/comments`, {
      comment,
    });
    return response.data.comment;
  },

  async deleteComment(slug: string, commentId: number): Promise<void> {
    await api.delete(`/articles/${slug}/comments/${commentId}`);
  },
};

// Profiles Service
export const ProfilesService = {
  async getProfile(username: string): Promise<any> {
    const response = await api.get(`/profiles/${username}`);
    return response.data.profile;
  },

  async followUser(username: string): Promise<any> {
    const response = await api.post(`/profiles/${username}/follow`);
    return response.data.profile;
  },

  async unfollowUser(username: string): Promise<any> {
    const response = await api.delete(`/profiles/${username}/follow`);
    return response.data.profile;
  },
};

// Tags Service
export const TagsService = {
  async getTags(): Promise<string[]> {
    try {
      const response: AxiosResponse<{ tags: string[] }> = await api.get('/tags');
      return response.data.tags;
    } catch (error) {
      // Return demo tags if endpoint doesn't exist
      return ['demo', 'leanvibe', 'multi-agent', 'fastapi', 'react', 'typescript'];
    }
  },
};

// Health Check Service
export const HealthService = {
  async checkHealth(): Promise<any> {
    const response = await api.get('/health');
    return response.data;
  },
};

export default api;