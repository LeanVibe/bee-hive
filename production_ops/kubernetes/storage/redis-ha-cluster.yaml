# Epic 8: Redis High-Availability Cluster
# Production Redis deployment with Sentinel-based automatic failover

apiVersion: v1
kind: Namespace
metadata:
  name: redis-production
  labels:
    name: redis-production
    environment: production
    component: cache

---
# Redis configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: redis-production
data:
  redis.conf: |
    # Network and security
    bind 0.0.0.0
    port 6379
    protected-mode no
    requirepass redis_production_password
    
    # Persistence - optimized for performance and durability
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    
    # Append Only File (AOF) for better durability
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Memory management
    maxmemory 4gb
    maxmemory-policy allkeys-lru
    
    # Replication settings
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    
    # Performance tuning
    tcp-keepalive 300
    tcp-backlog 511
    timeout 0
    databases 16
    
    # Logging
    loglevel notice
    logfile "/var/log/redis/redis-server.log"
    
    # Slow log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Client management
    maxclients 10000
    
    # Memory usage optimization
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
  sentinel.conf: |
    # Sentinel configuration for Redis HA
    port 26379
    sentinel announce-ip ${POD_IP}
    sentinel announce-port 26379
    
    # Monitor Redis master
    sentinel monitor mymaster redis-master-0.redis-headless 6379 2
    sentinel auth-pass mymaster redis_production_password
    
    # Failover configuration
    sentinel down-after-milliseconds mymaster 5000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 10000
    
    # Logging
    logfile "/var/log/redis/sentinel.log"
    loglevel notice

---
# Redis secrets
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: redis-production
type: Opaque
data:
  redis-password: cmVkaXNfcHJvZHVjdGlvbl9wYXNzd29yZA==  # redis_production_password
  REDIS_URL: cmVkaXM6Ly86cmVkaXNfcHJvZHVjdGlvbl9wYXNzd29yZEByZWRpcy1tYXN0ZXI6NjM3OS8w  # Full Redis URL

---
# Service account for Redis
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-sa
  namespace: redis-production

---
# Storage class for Redis persistence
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: redis-ssd
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd
  replication-type: regional-pd
reclaimPolicy: Retain
allowVolumeExpansion: true

---
# Redis Master StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: redis-production
  labels:
    app: redis
    role: master
    environment: production
spec:
  serviceName: redis-headless
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
  template:
    metadata:
      labels:
        app: redis
        role: master
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      serviceAccountName: redis-sa
      priorityClassName: production-high-priority
      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role
                operator: In
                values:
                - production
      
      tolerations:
      - key: "node-role.kubernetes.io/production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      containers:
      # Redis master container
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
        
        command:
          - redis-server
          - /usr/local/etc/redis/redis.conf
        
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
        - name: redis-logs
          mountPath: /var/log/redis
        
        startupProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
          limits:
            memory: "6Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
      
      # Redis exporter for monitoring
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 10
          periodSeconds: 10
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-logs
        emptyDir:
          sizeLimit: 1Gi
  
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: redis-ssd
      resources:
        requests:
          storage: 50Gi

---
# Redis Replica StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-replica
  namespace: redis-production
  labels:
    app: redis
    role: replica
    environment: production
spec:
  serviceName: redis-headless
  replicas: 2  # Two replicas for HA
  selector:
    matchLabels:
      app: redis
      role: replica
  template:
    metadata:
      labels:
        app: redis
        role: replica
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      serviceAccountName: redis-sa
      priorityClassName: production-high-priority
      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role
                operator: In
                values:
                - production
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: redis
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "node-role.kubernetes.io/production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      containers:
      # Redis replica container
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
        
        command:
          - redis-server
          - /usr/local/etc/redis/redis.conf
          - --replicaof
          - redis-master-0.redis-headless
          - "6379"
          - --masterauth
          - $(REDIS_PASSWORD)
        
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
        - name: redis-logs
          mountPath: /var/log/redis
        
        startupProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "3Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
      
      # Redis exporter for replica monitoring
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 10
          periodSeconds: 10
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "50m"
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-logs
        emptyDir:
          sizeLimit: 500Mi
  
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: redis-ssd
      resources:
        requests:
          storage: 20Gi

---
# Redis Sentinel for HA management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
  namespace: redis-production
  labels:
    app: redis-sentinel
    environment: production
spec:
  replicas: 3  # Odd number for quorum
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9355"
    spec:
      serviceAccountName: redis-sa
      priorityClassName: production-high-priority
      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role
                operator: In
                values:
                - production
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: redis-sentinel
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "node-role.kubernetes.io/production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      containers:
      # Redis Sentinel container
      - name: redis-sentinel
        image: redis:7-alpine
        ports:
        - containerPort: 26379
          name: sentinel
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        command:
          - redis-sentinel
          - /usr/local/etc/redis/sentinel.conf
        
        volumeMounts:
        - name: redis-config
          mountPath: /usr/local/etc/redis
        - name: sentinel-data
          mountPath: /data
        - name: redis-logs
          mountPath: /var/log/redis
        
        startupProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      
      # Sentinel exporter for monitoring
      - name: sentinel-exporter
        image: leominov/redis_sentinel_exporter:latest
        ports:
        - containerPort: 9355
          name: metrics
        
        env:
        - name: REDIS_SENTINEL_ADDR
          value: "redis://localhost:26379"
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9355
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9355
          initialDelaySeconds: 10
          periodSeconds: 10
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "50m"
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: sentinel-data
        emptyDir: {}
      - name: redis-logs
        emptyDir:
          sizeLimit: 500Mi

---
# Master service for writes
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: redis-production
  labels:
    app: redis
    role: master
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  - name: metrics
    port: 9121
    targetPort: 9121
  selector:
    app: redis
    role: master

---
# Replica service for reads
apiVersion: v1
kind: Service
metadata:
  name: redis-replica
  namespace: redis-production
  labels:
    app: redis
    role: replica
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  - name: metrics
    port: 9121
    targetPort: 9121
  selector:
    app: redis
    role: replica

---
# Sentinel service for HA management
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: redis-production
  labels:
    app: redis-sentinel
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9355"
spec:
  type: ClusterIP
  ports:
  - name: sentinel
    port: 26379
    targetPort: 26379
  - name: metrics
    port: 9355
    targetPort: 9355
  selector:
    app: redis-sentinel

---
# Headless service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: redis-production
  labels:
    app: redis
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  selector:
    app: redis

---
# Network policy for Redis cluster
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-netpol
  namespace: redis-production
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow connections from application namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: leanvibe-production
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9121
  
  # Allow sentinel communication
  - from:
    - podSelector:
        matchLabels:
          app: redis-sentinel
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow redis inter-communication
  - from:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  
  egress:
  # Allow redis replication
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Network policy for Redis Sentinel
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-sentinel-netpol
  namespace: redis-production
spec:
  podSelector:
    matchLabels:
      app: redis-sentinel
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9355
  
  # Allow sentinel inter-communication
  - from:
    - podSelector:
        matchLabels:
          app: redis-sentinel
    ports:
    - protocol: TCP
      port: 26379
  
  # Allow application connections for sentinel discovery
  - from:
    - namespaceSelector:
        matchLabels:
          name: leanvibe-production
    ports:
    - protocol: TCP
      port: 26379
  
  egress:
  # Allow communication with Redis instances
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow sentinel inter-communication
  - to:
    - podSelector:
        matchLabels:
          app: redis-sentinel
    ports:
    - protocol: TCP
      port: 26379
  
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53