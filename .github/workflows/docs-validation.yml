name: 📚 Living Documentation Validation

on:
  push:
    branches: [ main, develop ]
    paths: 
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs-validation.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs-validation.yml'
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      validation_type:
        description: 'Type of validation to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - code_examples
          - links
          - currency
          - onboarding

jobs:
  validate-documentation:
    name: 🔍 Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for currency analysis
    
    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-docs-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-docs-
    
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp pyyaml requests
        # Install Node.js for JavaScript validation
        sudo apt-get update
        sudo apt-get install -y nodejs npm
        
    - name: 🧪 Run Code Example Tests
      if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'code_examples' || github.event.inputs.validation_type == ''
      run: |
        echo "🧪 Testing code examples in documentation..."
        python docs/automation/code_example_tester.py
      continue-on-error: true
    
    - name: 🔗 Validate Links
      if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'links' || github.event.inputs.validation_type == ''
      run: |
        echo "🔗 Validating all documentation links..."
        python docs/automation/link_validator.py
      continue-on-error: true
    
    - name: 📅 Check Content Currency
      if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'currency' || github.event.inputs.validation_type == ''
      run: |
        echo "📅 Analyzing content currency..."
        python docs/automation/currency_monitor.py
      continue-on-error: true
    
    - name: 🚀 Validate Developer Onboarding
      if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'onboarding' || github.event.inputs.validation_type == ''
      run: |
        echo "🚀 Validating 30-minute developer onboarding flow..."
        python docs/automation/onboarding_validator.py
      continue-on-error: true
    
    - name: 📊 Run Complete Living Documentation System
      if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == ''
      run: |
        echo "📊 Running complete living documentation validation..."
        python docs/living_documentation_system.py
      continue-on-error: true
    
    - name: 📋 Upload Validation Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation-validation-reports
        path: |
          docs/validation_report.json
          docs/currency_analysis_report.md
          docs/onboarding_validation_report.json
        retention-days: 30
    
    - name: 💬 Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = './docs/validation_report.json';
          
          if (fs.existsSync(path)) {
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            
            const summary = report.summary || {};
            const successRate = summary.success_rate || 0;
            const errorCount = summary.error_count || 0;
            
            let status = '✅';
            let statusText = 'PASSED';
            
            if (errorCount > 5) {
              status = '❌';
              statusText = 'FAILED';
            } else if (errorCount > 0) {
              status = '⚠️';
              statusText = 'WARNINGS';
            }
            
            const comment = `
            ## 📚 Documentation Validation Results ${status}
            
            **Status:** ${statusText}
            **Success Rate:** ${successRate}%
            **Files Validated:** ${summary.total_files_validated || 0}
            **Total Validations:** ${summary.total_validations || 0}
            
            ### Results Breakdown
            - ✅ Success: ${summary.success_count || 0}
            - ⚠️ Warnings: ${summary.warning_count || 0}
            - ❌ Errors: ${errorCount}
            
            ${errorCount > 0 ? '### ❌ Errors Found\nPlease check the validation artifacts for detailed error information.' : '### 🎉 All Documentation Validation Passed!'}
            
            <details>
            <summary>📋 View Detailed Results</summary>
            
            The validation covered:
            - Code example testing (Python, Bash, JavaScript, JSON)
            - Link validation (internal and external)
            - Content currency analysis
            - Developer onboarding flow validation
            
            Full reports are available in the workflow artifacts.
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  validate-api-documentation:
    name: 🌐 API Documentation Validation
    runs-on: ubuntu-latest
    needs: validate-documentation
    if: contains(github.event.head_commit.message, '[api]') || github.event.inputs.validation_type == 'all' || github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: leanvibe_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest httpx
        
    - name: 🏥 Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 2
        done
        echo "PostgreSQL is up"
        
        echo "Waiting for Redis..."
        until redis-cli -h localhost -p 6379 ping; do
          echo "Redis is unavailable - sleeping"
          sleep 2
        done
        echo "Redis is up"
    
    - name: 🚀 Start API Server
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/leanvibe_test"
        export REDIS_URL="redis://localhost:6379/0"
        python -m uvicorn app.main:app --host 0.0.0.0 --port 18080 &
        sleep 10  # Wait for server to start
        
        # Health check
        curl -f http://localhost:18080/health || exit 1
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/leanvibe_test
        REDIS_URL: redis://localhost:6379/0
    
    - name: 🧪 Test API Examples in Documentation
      run: |
        echo "🧪 Testing API examples from documentation..."
        python -c "
        import requests
        import json
        
        # Test health endpoint
        response = requests.get('http://localhost:18080/health')
        assert response.status_code == 200, f'Health check failed: {response.status_code}'
        print('✅ Health endpoint working')
        
        # Test API documentation examples
        try:
            response = requests.get('http://localhost:18080/api/agents')
            print(f'Agents endpoint status: {response.status_code}')
            
            response = requests.get('http://localhost:18080/api/status')
            print(f'Status endpoint status: {response.status_code}')
            
            response = requests.get('http://localhost:18080/docs')
            assert response.status_code == 200, 'API docs not accessible'
            print('✅ API documentation accessible')
            
        except Exception as e:
            print(f'⚠️  API endpoint testing: {e}')
        "

  documentation-health-check:
    name: 📊 Documentation Health Dashboard
    runs-on: ubuntu-latest
    needs: [validate-documentation, validate-api-documentation]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📊 Generate Documentation Health Badge
      run: |
        # Create a simple health status based on validation results
        echo "📊 Generating documentation health status..."
        
        # This would integrate with your documentation dashboard
        # For now, create a simple status file
        cat > docs/documentation_health.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "status": "healthy",
          "last_validation": {
            "workflow": "${{ github.run_id }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}"
          },
          "metrics": {
            "validation_run": "${{ needs.validate-documentation.result }}",
            "api_validation": "${{ needs.validate-api-documentation.result }}"
          }
        }
        EOF
    
    - name: 📤 Update Documentation Health Status
      run: |
        echo "📤 Documentation health status updated"
        echo "Workflow completed successfully!"

  notify-documentation-team:
    name: 📧 Notify Documentation Team
    runs-on: ubuntu-latest
    needs: [validate-documentation, validate-api-documentation]
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
    - name: 📧 Send notification
      run: |
        echo "📧 Would notify documentation team of validation failures"
        echo "This would integrate with Slack, email, or other notification systems"
        echo "Validation status: ${{ needs.validate-documentation.result }}"
        echo "API validation status: ${{ needs.validate-api-documentation.result }}"