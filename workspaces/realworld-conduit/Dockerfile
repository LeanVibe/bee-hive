# Multi-stage Dockerfile for RealWorld Conduit
# Generated by LeanVibe Agent Hive 2.0 DevOps Specialist
# 
# Production-ready containerization with optimized layers,
# security hardening, and multi-architecture support.

# =============================================================================
# Stage 1: Frontend Build
# =============================================================================
FROM node:18-alpine AS frontend-builder

# Set working directory
WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --no-audit --no-fund

# Copy source code
COPY frontend/ ./

# Build optimized production bundle
RUN npm run build

# =============================================================================
# Stage 2: Backend Dependencies
# =============================================================================
FROM python:3.11-slim AS backend-deps

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    gcc \\
    g++ \\
    libpq-dev \\
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements file
COPY backend/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \\
    pip install --no-cache-dir -r requirements.txt

# =============================================================================
# Stage 3: Production Runtime
# =============================================================================
FROM python:3.11-slim AS production

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install runtime dependencies
RUN apt-get update && apt-get install -y \\
    libpq5 \\
    nginx \\
    supervisor \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Python dependencies from deps stage
COPY --from=backend-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-deps /usr/local/bin/uvicorn /usr/local/bin/uvicorn

# Copy backend application
COPY backend/ ./backend/

# Copy frontend build from frontend-builder stage
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist/

# Copy configuration files
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create necessary directories and set permissions
RUN mkdir -p /var/log/nginx /var/log/supervisor /app/logs && \\
    chown -R appuser:appuser /app /var/log/nginx /var/log/supervisor && \\
    chmod +x /app/backend/main.py

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:8000/api/health || exit 1

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 80 8000

# Set environment variables
ENV PYTHONPATH=/app/backend
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Default command
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# =============================================================================
# Stage 4: Development Environment
# =============================================================================
FROM production AS development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN pip install --no-cache-dir pytest pytest-asyncio pytest-cov black flake8 mypy

# Install Node.js for frontend development
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \\
    apt-get install -y nodejs

# Copy development configuration
COPY docker/supervisord-dev.conf /etc/supervisor/conf.d/supervisord.conf

# Create development user
RUN chown -R appuser:appuser /app

# Switch back to app user
USER appuser

# Development command with hot reload
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# =============================================================================
# Build Arguments and Labels
# =============================================================================
ARG VERSION=1.0.0
ARG BUILD_DATE
ARG VCS_REF

LABEL org.opencontainers.image.title="RealWorld Conduit" \\
      org.opencontainers.image.description="A Medium.com clone built with LeanVibe Agent Hive 2.0" \\
      org.opencontainers.image.version=$VERSION \\
      org.opencontainers.image.created=$BUILD_DATE \\
      org.opencontainers.image.revision=$VCS_REF \\
      org.opencontainers.image.vendor="LeanVibe Agent Hive 2.0" \\
      org.opencontainers.image.source="https://github.com/leanvibe/realworld-conduit" \\
      maintainer="LeanVibe DevOps Specialist"