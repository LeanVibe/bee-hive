# Docker Compose for RealWorld Conduit
# Generated by LeanVibe Agent Hive 2.0 DevOps Specialist
# 
# Complete production-ready stack with PostgreSQL, Redis,
# monitoring, and automated deployment capabilities.

version: '3.8'

services:
  # =============================================================================
  # Database Services
  # =============================================================================
  
  # PostgreSQL Database with Vector Extensions
  postgres:
    image: postgres:15-alpine
    container_name: conduit_postgres
    environment:
      POSTGRES_DB: conduit
      POSTGRES_USER: conduit_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-conduit_secure_pass}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - conduit_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U conduit_user -d conduit"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: conduit_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-conduit_redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - conduit_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # Application Services
  # =============================================================================

  # RealWorld Conduit Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        VERSION: 1.0.0
        BUILD_DATE: ${BUILD_DATE:-2025-07-30}
        VCS_REF: ${VCS_REF:-main}
    container_name: conduit_app
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://conduit_user:${POSTGRES_PASSWORD:-conduit_secure_pass}@postgres:5432/conduit
      - REDIS_URL=redis://:${REDIS_PASSWORD:-conduit_redis_pass}@redis:6379/0
      
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY:-conduit_super_secret_key_change_in_production}
      - JWT_SECRET=${JWT_SECRET:-conduit_jwt_secret_key}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_BASE_URL=${API_BASE_URL:-http://localhost:8000}
      
      # Performance Configuration
      - WORKERS=${WORKERS:-4}
      - MAX_CONNECTIONS=${MAX_CONNECTIONS:-100}
      - KEEPALIVE_TIMEOUT=${KEEPALIVE_TIMEOUT:-5}
    ports:
      - "8000:8000"
      - "80:80"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - conduit_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # =============================================================================
  # Development Services (Optional)
  # =============================================================================

  # Development Environment with Hot Reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: conduit_app_dev
    environment:
      - DATABASE_URL=postgresql://conduit_user:${POSTGRES_PASSWORD:-conduit_secure_pass}@postgres:5432/conduit
      - REDIS_URL=redis://:${REDIS_PASSWORD:-conduit_redis_pass}@redis:6379/0
      - SECRET_KEY=conduit_dev_secret_key
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - RELOAD=true
    ports:
      - "8001:8000"
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - conduit_network
    profiles:
      - development

  # =============================================================================
  # Monitoring and Observability
  # =============================================================================

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: conduit_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - conduit_network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: conduit_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - conduit_network
    profiles:
      - monitoring
    restart: unless-stopped

  # =============================================================================
  # Load Balancer (Production)
  # =============================================================================

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: conduit_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    ports:
      - "443:443"
      - "8080:80"
    depends_on:
      - app
    networks:
      - conduit_network
    profiles:
      - production
    restart: unless-stopped

  # =============================================================================
  # Testing Services
  # =============================================================================

  # Automated Testing Runner
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: conduit_test_runner
    environment:
      - DATABASE_URL=postgresql://conduit_user:conduit_test_pass@postgres-test:5432/conduit_test
      - REDIS_URL=redis://:conduit_test_pass@redis-test:6379/1
      - ENVIRONMENT=testing
    volumes:
      - .:/app
      - test_reports:/app/test-reports
    depends_on:
      - postgres-test
      - redis-test
    networks:
      - conduit_network
    profiles:
      - testing
    command: pytest tests/ --cov=backend --cov-report=html --cov-report=xml

  # Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: conduit_postgres_test
    environment:
      POSTGRES_DB: conduit_test
      POSTGRES_USER: conduit_user
      POSTGRES_PASSWORD: conduit_test_pass
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - conduit_network
    profiles:
      - testing

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: conduit_redis_test
    command: redis-server --requirepass conduit_test_pass
    networks:
      - conduit_network
    profiles:
      - testing

# =============================================================================
# Networks and Volumes
# =============================================================================

networks:
  conduit_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  test_reports:
    driver: local

# =============================================================================
# Health Check Configuration
# =============================================================================

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

# =============================================================================
# Resource Limits Template
# =============================================================================

x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        memory: 512M
        cpus: '0.5'
      reservations:
        memory: 256M
        cpus: '0.25'