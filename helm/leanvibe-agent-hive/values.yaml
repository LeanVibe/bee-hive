# LeanVibe Agent Hive 2.0 - Helm Chart Values
# Default values for leanvibe-agent-hive

# Global configuration
global:
  # Image registry and repository
  imageRegistry: "ghcr.io"
  imageRepository: "leanvibe/agent-hive"
  
  # Environment configuration
  environment: production
  
  # Common labels applied to all resources
  commonLabels:
    app.kubernetes.io/part-of: leanvibe-platform
    app.kubernetes.io/managed-by: helm
  
  # Storage class for persistent volumes
  storageClass: "fast-ssd"
  
  # Security context for all containers
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

# Application configuration
app:
  # Image configuration
  image:
    repository: ""  # Uses global.imageRepository if empty
    tag: "2.0.0-production"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Deployment configuration
  replicaCount: 3
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}
  
  # Container configuration
  container:
    port: 8000
    metricsPort: 9090
    
    # Environment variables
    env:
      LOG_LEVEL: INFO
      DEBUG: "false"
      ENVIRONMENT: production
      WORKERS: "4"
      MAX_CONCURRENT_AGENTS: "50"
      PROMETHEUS_METRICS_ENABLED: "true"
    
    # Resource requests and limits
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    
    # Security context
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    
    # Liveness probe
    livenessProbe:
      httpGet:
        path: /health
        port: 8000
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    
    # Readiness probe
    readinessProbe:
      httpGet:
        path: /health/ready
        port: 8000
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    
    # Startup probe
    startupProbe:
      httpGet:
        path: /health
        port: 8000
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 12

  # Volume mounts
  volumeMounts:
    - name: temp-storage
      mountPath: /app/temp
    - name: logs-storage
      mountPath: /app/logs
    - name: workspaces-storage
      mountPath: /app/workspaces

  # Volumes
  volumes:
    - name: temp-storage
      emptyDir:
        sizeLimit: 1Gi
    - name: logs-storage
      emptyDir:
        sizeLimit: 2Gi
    - name: workspaces-storage
      emptyDir:
        sizeLimit: 5Gi

  # Pod annotations
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"

  # Pod labels
  podLabels: {}

  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - api
          topologyKey: kubernetes.io/hostname

# Auto-scaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  
  # Resource-based scaling
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  
  # Custom metrics scaling
  customMetrics:
    - type: Pods
      pods:
        metric:
          name: active_agents_count
        target:
          type: AverageValue
          averageValue: "10"
  
  # Scaling behavior
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Service Account
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: false

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list", "watch"]

# PostgreSQL configuration
postgresql:
  enabled: true
  
  # Image configuration
  image:
    repository: pgvector/pgvector
    tag: pg15
  
  # Authentication
  auth:
    postgresPassword: ""  # Will be generated if empty
    username: leanvibe_user
    password: ""  # Will be generated if empty
    database: leanvibe_agent_hive
  
  # Primary configuration
  primary:
    persistence:
      enabled: true
      storageClass: ""  # Uses global.storageClass
      size: 100Gi
    
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 4Gi
        cpu: 2000m
    
    # PostgreSQL configuration
    pgHbaConfiguration: |
      local all all trust
      host all all 0.0.0.0/0 md5
      host replication all 0.0.0.0/0 md5
    
    configuration: |
      max_connections = 200
      shared_buffers = 256MB
      effective_cache_size = 1GB
      work_mem = 16MB
      maintenance_work_mem = 64MB
      wal_buffers = 16MB
      checkpoint_completion_target = 0.9
      checkpoint_timeout = 10min
      max_wal_size = 1GB
      min_wal_size = 80MB
      log_min_duration_statement = 1000
      log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      log_statement = 'ddl'
      random_page_cost = 1.1
      effective_io_concurrency = 200
      shared_preload_libraries = 'vector'
    
    # Backup configuration
    backup:
      enabled: true
      retention: "30d"
  
  # Metrics
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: true
  
  # Architecture
  architecture: standalone
  
  # Authentication
  auth:
    enabled: true
    password: ""  # Will be generated if empty
  
  # Master configuration
  master:
    persistence:
      enabled: true
      storageClass: ""  # Uses global.storageClass
      size: 20Gi
    
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m
    
    # Redis configuration
    configuration: |
      maxmemory 1gb
      maxmemory-policy allkeys-lru
      save 900 1
      save 300 10
      save 60 10000
      tcp-keepalive 60
      timeout 0
      stream-node-max-bytes 4096
      stream-node-max-entries 100
  
  # Metrics
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Frontend (Nginx) configuration
frontend:
  enabled: true
  
  # Image configuration
  image:
    repository: nginx
    tag: alpine
    pullPolicy: IfNotPresent
  
  # Deployment configuration
  replicaCount: 2
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  # Container configuration
  container:
    port: 80
    
    # Resource requests and limits
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "200m"
  
  # Configuration
  config:
    # Nginx configuration will be mounted from ConfigMap
    {}

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  
  # Annotations
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  # Hosts configuration
  hosts:
    - host: app.leanvibe.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: frontend
            port: 80
    - host: api.leanvibe.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: leanvibe-api
            port: 8000
    - host: dashboard.leanvibe.com
      paths:
        - path: /api/
          pathType: Prefix
          service:
            name: leanvibe-api
            port: 8000
        - path: /ws/
          pathType: Prefix
          service:
            name: leanvibe-api
            port: 8000
        - path: /
          pathType: Prefix
          service:
            name: frontend
            port: 80
  
  # TLS configuration
  tls:
    - secretName: leanvibe-tls
      hosts:
        - app.leanvibe.com
        - api.leanvibe.com
        - dashboard.leanvibe.com

# Monitoring configuration
monitoring:
  # Prometheus
  prometheus:
    enabled: true
    
    # Configuration
    server:
      retention: "30d"
      storageSize: "100Gi"
      resources:
        requests:
          memory: 2Gi
          cpu: 1000m
        limits:
          memory: 8Gi
          cpu: 4000m
    
    # Service monitors
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
  
  # Grafana
  grafana:
    enabled: true
    
    # Admin configuration
    adminPassword: ""  # Will be generated if empty
    
    # Persistence
    persistence:
      enabled: true
      size: 10Gi
    
    # Resources
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m
    
    # Dashboards
    dashboards:
      enabled: true
    
    # Data sources
    datasources:
      enabled: true
  
  # AlertManager
  alertmanager:
    enabled: true
    
    # Configuration
    config:
      global:
        smtp_smarthost: 'localhost:587'
        smtp_from: 'alertmanager@leanvibe.com'
      
      route:
        group_by: ['alertname']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: 'default'
      
      receivers:
      - name: 'default'
        email_configs:
        - to: 'devops@leanvibe.com'
          subject: 'LeanVibe Agent Hive Alert'
    
    # Persistence
    persistence:
      enabled: true
      size: 5Gi
    
    # Resources
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 500m

# Network Policy
networkPolicy:
  enabled: true
  
  # Ingress rules
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 9090
    - from:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: leanvibe-agent-hive
  
  # Egress rules
  egress:
    - to: []
      ports:
      - protocol: UDP
        port: 53
    - to: []
      ports:
      - protocol: TCP
        port: 443
      - protocol: TCP
        port: 80
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: leanvibe-agent-hive

# Secret management
secrets:
  # External secret operator
  externalSecrets:
    enabled: false
    secretStore: aws-secrets-manager
  
  # Manual secret creation
  create: true
  
  # Secret values (should be overridden in production)
  values:
    anthropicApiKey: ""
    secretKey: ""
    jwtSecretKey: ""

# Configuration
config:
  # Application configuration
  app:
    logLevel: INFO
    debug: false
    corsOrigins: "https://app.leanvibe.com,https://dashboard.leanvibe.com"
    maxConcurrentAgents: 50
    websocketHeartbeatInterval: 30
    websocketTimeout: 60
  
  # Database configuration
  database:
    poolSize: 20
    maxOverflow: 10
    poolTimeout: 30
    poolRecycle: 3600
  
  # Redis configuration
  redis:
    maxConnections: 100
    retryOnTimeout: true

# Environment-specific overrides
environments:
  development:
    app:
      replicaCount: 1
      env:
        LOG_LEVEL: DEBUG
        DEBUG: "true"
        MAX_CONCURRENT_AGENTS: "10"
    postgresql:
      primary:
        persistence:
          size: 10Gi
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 1Gi
            cpu: 500m
    redis:
      master:
        persistence:
          size: 5Gi
        resources:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 512Mi
            cpu: 250m
  
  staging:
    app:
      replicaCount: 2
      env:
        MAX_CONCURRENT_AGENTS: "25"
    postgresql:
      primary:
        persistence:
          size: 50Gi
    redis:
      master:
        persistence:
          size: 10Gi
  
  production:
    app:
      replicaCount: 5
      env:
        MAX_CONCURRENT_AGENTS: "100"
    postgresql:
      primary:
        persistence:
          size: 200Gi
        resources:
          requests:
            memory: 4Gi
            cpu: 2000m
          limits:
            memory: 16Gi
            cpu: 8000m
    redis:
      master:
        persistence:
          size: 50Gi
        resources:
          requests:
            memory: 2Gi
            cpu: 1000m
          limits:
            memory: 8Gi
            cpu: 4000m