name: LeanVibe Autonomous Development

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      autonomous_mode:
        description: 'Enable fully autonomous development mode'
        required: false
        default: 'false'
        type: boolean
      max_agents:
        description: 'Maximum number of concurrent agents'
        required: false
        default: '3'
        type: number
      target_environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  LEANVIBE_API_URL: ${{ vars.LEANVIBE_API_URL || 'http://localhost:8000' }}
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # Quality Gates - Run First
  quality-gates:
    name: Quality Gates & Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.quality-check.outputs.should_deploy }}
      test_coverage: ${{ steps.coverage.outputs.percentage }}
      security_passed: ${{ steps.security.outputs.passed }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        pip install -e .
        pip install pytest coverage bandit safety ruff mypy
    
    - name: Code Quality Checks
      id: quality-check
      run: |
        echo "Running comprehensive code quality checks..."
        
        # Static analysis
        ruff check . --output-format=github
        mypy app/ --show-error-codes
        
        # Security scan
        bandit -r app/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
        
        # Set output based on checks
        if [ $? -eq 0 ]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Run Tests with Coverage
      id: coverage
      run: |
        coverage run -m pytest tests/ -v --tb=short
        coverage report --format=markdown > coverage-report.md
        coverage_pct=$(coverage report --format=total)
        echo "percentage=$coverage_pct" >> $GITHUB_OUTPUT
        
        # Enforce minimum coverage
        if [ $coverage_pct -lt 80 ]; then
          echo "‚ùå Test coverage below minimum (80%): $coverage_pct%"
          exit 1
        fi
    
    - name: Security Validation
      id: security
      run: |
        # Check for security issues
        security_issues=$(jq '.results | length' bandit-report.json)
        safety_issues=$(jq '.vulnerabilities | length' safety-report.json)
        
        if [ $security_issues -gt 0 ] || [ $safety_issues -gt 0 ]; then
          echo "‚ùå Security issues found: $security_issues bandit + $safety_issues safety"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ Security validation passed"
          echo "passed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage-report.md
          bandit-report.json
          safety-report.json

  # Agent Hive Autonomous Development
  autonomous-development:
    name: Autonomous Development with Agent Hive
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should_deploy == 'true'
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: leanvibe_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_HOST_AUTH_METHOD: md5
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'mobile-pwa/package-lock.json'
    
    - name: Install Dependencies
      run: |
        pip install -e .
        cd mobile-pwa && npm ci
    
    - name: Setup Database
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/leanvibe_test
      run: |
        alembic upgrade head
    
    - name: Start Agent Hive Platform
      id: start-hive
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/leanvibe_test
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: ci
      run: |
        echo "Starting LeanVibe Agent Hive platform..."
        
        # Start the API server in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        echo "api_pid=$API_PID" >> $GITHUB_OUTPUT
        
        # Wait for API to be ready
        for i in {1..30}; do
          if curl -sf http://localhost:8000/health > /dev/null; then
            echo "‚úÖ Agent Hive API is ready"
            break
          fi
          echo "Waiting for API... ($i/30)"
          sleep 2
        done
        
        # Verify API is responding
        curl http://localhost:8000/health || exit 1
    
    - name: Deploy Autonomous Development Team
      id: deploy-agents
      run: |
        echo "Deploying autonomous development team..."
        
        # Create autonomous development agents
        python -c "
        import asyncio
        import aiohttp
        import sys
        
        async def deploy_agents():
            agents_config = [
                {'role': 'architect', 'name': 'AutonomousArchitect'},
                {'role': 'backend_developer', 'name': 'BackendEngineer'},
                {'role': 'frontend_developer', 'name': 'FrontendEngineer'},
            ]
            
            if '${{ inputs.max_agents }}' and int('${{ inputs.max_agents }}') > 3:
                agents_config.extend([
                    {'role': 'tester', 'name': 'QualityAssurance'},
                    {'role': 'devops', 'name': 'DevOpsEngineer'}
                ])
            
            async with aiohttp.ClientSession() as session:
                created_agents = []
                for config in agents_config:
                    async with session.post('http://localhost:8000/api/v1/agents', json=config) as resp:
                        if resp.status == 200:
                            agent = await resp.json()
                            created_agents.append(agent['id'])
                            print(f'‚úÖ Created agent: {config[\"name\"]} ({agent[\"id\"]})')
                        else:
                            print(f'‚ùå Failed to create agent: {config[\"name\"]}')
                            sys.exit(1)
                
                return created_agents
        
        agents = asyncio.run(deploy_agents())
        echo 'agent_ids=' + ','.join(agents) >> $GITHUB_OUTPUT
        "
    
    - name: Run Autonomous Development Workflow
      if: inputs.autonomous_mode == 'true'
      run: |
        echo "ü§ñ Starting fully autonomous development workflow..."
        
        # Trigger autonomous development demo
        python scripts/demos/autonomous_development_demo.py --ci-mode --github-context="${{ toJson(github) }}"
    
    - name: Execute Development Tasks
      run: |
        echo "Executing development tasks with Agent Hive..."
        
        # Run comprehensive system validation
        python -c "
        import asyncio
        import aiohttp
        import json
        
        async def execute_tasks():
            tasks = [
                {
                    'title': 'Code Quality Enhancement',
                    'description': 'Analyze and improve code quality across the codebase',
                    'type': 'code_analysis',
                    'priority': 'high'
                },
                {
                    'title': 'Performance Optimization', 
                    'description': 'Identify and resolve performance bottlenecks',
                    'type': 'performance',
                    'priority': 'medium'
                },
                {
                    'title': 'Security Audit',
                    'description': 'Comprehensive security analysis and hardening',
                    'type': 'security',
                    'priority': 'critical'
                }
            ]
            
            async with aiohttp.ClientSession() as session:
                for task in tasks:
                    async with session.post('http://localhost:8000/api/v1/tasks', json=task) as resp:
                        if resp.status == 200:
                            result = await resp.json()
                            print(f'‚úÖ Created task: {task[\"title\"]} ({result[\"id\"]})')
                        else:
                            print(f'‚ùå Failed to create task: {task[\"title\"]}')
        
        asyncio.run(execute_tasks())
        "
    
    - name: Monitor Development Progress
      timeout-minutes: 30
      run: |
        echo "Monitoring autonomous development progress..."
        
        python -c "
        import asyncio
        import aiohttp
        import time
        
        async def monitor_progress():
            start_time = time.time()
            max_wait = 30 * 60  # 30 minutes
            
            while time.time() - start_time < max_wait:
                async with aiohttp.ClientSession() as session:
                    # Check task status
                    async with session.get('http://localhost:8000/api/v1/tasks') as resp:
                        if resp.status == 200:
                            tasks = await resp.json()
                            pending_tasks = [t for t in tasks.get('tasks', []) if t['status'] in ['pending', 'in_progress']]
                            
                            if not pending_tasks:
                                print('‚úÖ All autonomous development tasks completed!')
                                break
                            
                            print(f'‚è≥ {len(pending_tasks)} tasks still in progress...')
                        else:
                            print('‚ùå Failed to check task status')
                            break
                
                await asyncio.sleep(30)  # Check every 30 seconds
            else:
                print('‚ö†Ô∏è  Timeout waiting for tasks to complete')
        
        asyncio.run(monitor_progress())
        "
    
    - name: Generate Development Report
      run: |
        echo "Generating autonomous development report..."
        
        # Get final status and metrics
        python -c "
        import asyncio
        import aiohttp
        import json
        
        async def generate_report():
            async with aiohttp.ClientSession() as session:
                # Get agents status
                async with session.get('http://localhost:8000/api/v1/agents') as resp:
                    agents = await resp.json() if resp.status == 200 else {'agents': []}
                
                # Get tasks status  
                async with session.get('http://localhost:8000/api/v1/tasks') as resp:
                    tasks = await resp.json() if resp.status == 200 else {'tasks': []}
                
                # Get system metrics
                async with session.get('http://localhost:8000/api/v1/system/metrics') as resp:
                    metrics = await resp.json() if resp.status == 200 else {}
                
                report = {
                    'timestamp': '$(date -Iseconds)',
                    'agents': len(agents.get('agents', [])),
                    'tasks_completed': len([t for t in tasks.get('tasks', []) if t['status'] == 'completed']),
                    'tasks_failed': len([t for t in tasks.get('tasks', []) if t['status'] == 'failed']),
                    'coverage': '${{ needs.quality-gates.outputs.test_coverage }}%',
                    'security_passed': '${{ needs.quality-gates.outputs.security_passed }}',
                    'metrics': metrics
                }
                
                with open('autonomous-development-report.json', 'w') as f:
                    json.dump(report, f, indent=2)
                    
                print('üìä Autonomous Development Report Generated')
        
        asyncio.run(generate_report())
        "
    
    - name: Upload Development Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: autonomous-development-artifacts
        path: |
          autonomous-development-report.json
          logs/

  # Deployment (only if autonomous development succeeded)
  deploy:
    name: Deploy to ${{ inputs.target_environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [quality-gates, autonomous-development]
    if: success() && (github.ref == 'refs/heads/main' || inputs.target_environment == 'production')
    environment: ${{ inputs.target_environment || 'staging' }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: autonomous-development-artifacts
    
    - name: Deploy with Agent Hive
      run: |
        echo "üöÄ Deploying to ${{ inputs.target_environment || 'staging' }} using Agent Hive..."
        
        # Use Agent Hive deployment automation
        python -c "
        import asyncio
        import aiohttp
        
        async def deploy():
            deployment_config = {
                'environment': '${{ inputs.target_environment || \"staging\" }}',
                'branch': '${{ github.ref }}',
                'commit': '${{ github.sha }}',
                'autonomous_mode': ${{ inputs.autonomous_mode || false }}
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post('http://localhost:8000/api/v1/deploy', json=deployment_config) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        print(f'‚úÖ Deployment initiated: {result[\"deployment_id\"]}')
                    else:
                        print('‚ùå Deployment failed')
                        exit(1)
        
        asyncio.run(deploy())
        "
    
    - name: Post-Deployment Validation
      run: |
        echo "Validating deployment..."
        # Add deployment validation logic here
        
        # Notify stakeholders
        echo "üì¢ Deployment to ${{ inputs.target_environment || 'staging' }} completed successfully!"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-gates, autonomous-development, deploy]
    
    steps:
    - name: Cleanup Agent Hive Resources
      run: |
        echo "Cleaning up Agent Hive resources..."
        # Add cleanup logic for agents and resources
        echo "‚úÖ Cleanup completed"