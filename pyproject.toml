[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "leanvibe-agent-hive"
version = "2.0.0"
description = "Multi-Agent Orchestration System for Autonomous Software Development"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "LeanVibe Team", email = "dev@leanvibe.com"}
]
keywords = [
    "ai", "agents", "orchestration", "development", "automation",
    "claude", "fastapi", "postgres", "redis", "multi-agent"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Web Framework
    "fastapi[all]>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    
    # Database - Async PostgreSQL with Vector Support
    "sqlalchemy[asyncio]>=2.0.23",
    "asyncpg>=0.29.0",
    "alembic>=1.12.1",
    "pgvector>=0.2.4",
    "psycopg2-binary>=2.9.7",
    
    # Redis - Async Support with Streams
    "redis[hiredis]>=5.0.1",
    "aioredis>=2.0.1",
    
    # AI/ML - Anthropic Claude Integration
    "anthropic>=0.7.8",
    "openai>=1.3.0",  # For embeddings
    "tiktoken>=0.5.1",  # Token counting
    
    # Data Processing & Validation
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    
    # Async & Concurrency
    "asyncio-mqtt>=0.13.0",
    "aiofiles>=23.2.1",
    "httpx>=0.25.2",
    
    # Background Tasks & Scheduling
    "celery[redis]>=5.3.4",
    "apscheduler>=3.10.4",
    
    # Logging & Monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-prometheus>=0.56b0",
    
    # Security & Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=41.0.7",
    "authlib>=1.2.1",
    "oauthlib>=3.2.2",
    
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    "click>=8.1.7",
    "typer>=0.9.0",
    
    # tmux Integration
    "libtmux>=0.23.2",
    
    # Data Serialization
    "orjson>=3.9.10",
    "msgpack>=1.0.7",
    
    # Date/Time Utilities
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    
    # File Processing & Compression
    "aiofiles>=23.2.1",
    "watchfiles>=0.21.0",
    "zstandard>=0.22.0",
    
    # System Utilities
    "psutil>=5.9.6",
    "rich>=13.7.0",
    
    # GitHub Integration & Git Operations
    "GitPython>=3.1.40",
    "PyGithub>=1.59.1",
    
    # Self-Modification Engine Dependencies
    "docker>=6.1.3",  # Docker API for sandbox environment
    "radon>=6.0.1",  # Code complexity analysis
    "bandit>=1.7.5",  # Security analysis
]

[project.optional-dependencies]
# Development Dependencies
dev = [
    # Testing Framework
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",  # Parallel testing
    "pytest-benchmark>=4.0.0",
    "httpx>=0.25.2",  # For testing async API endpoints
    "factory-boy>=3.3.0",  # Test data factories
    
    # Code Quality & Formatting
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "bandit>=1.7.5",  # Security linting
    "safety>=2.3.5",  # Dependency vulnerability scanning
    
    # Type Checking
    "types-redis>=4.6.0.11",
    "types-python-dateutil>=2.8.19.14",
    "sqlalchemy[mypy]>=2.0.23",
    
    # Development Tools
    "pre-commit>=3.6.0",
    "commitizen>=3.13.0",
    "python-semantic-release>=8.5.1",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
    
    # Debugging & Profiling
    "ipython>=8.17.2",
    "ipdb>=0.13.13",
    "line-profiler>=4.1.1",
    "memory-profiler>=0.61.0",
]

# Production Dependencies
prod = [
    "sentry-sdk[fastapi]>=1.38.0",  # Error tracking
    "newrelic>=9.2.0",  # APM monitoring
]

# Monitoring & Observability
monitoring = [
    "grafana-client>=3.5.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
]

# AI/ML Extended Features
ai-extended = [
    "langchain>=0.0.340",
    "langchain-community>=0.0.0",
    "sentence-transformers>=2.2.2",
    "numpy>=1.24.4",
    "scikit-learn>=1.3.2",
    "networkx>=3.2.1",  # For knowledge graph construction and analysis
]

[project.urls]
Homepage = "https://github.com/leanvibe/agent-hive"
Documentation = "https://agent-hive.leanvibe.com"
Repository = "https://github.com/leanvibe/agent-hive.git"
Issues = "https://github.com/leanvibe/agent-hive/issues"

[project.scripts]
agent-hive = "app.cli:main"
ahive = "app.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.version]
path = "app/__init__.py"

# === DEVELOPMENT TOOLS CONFIGURATION ===

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "redis: marks tests that require Redis",
    "postgres: marks tests that require PostgreSQL",
    "anthropic: marks tests that require Anthropic API",
    "performance: marks tests as performance benchmarks",
    "error_handling: marks tests for error handling scenarios",
    "concurrent: marks tests for concurrent execution",
    "recovery: marks tests for recovery scenarios",
    "validation: marks tests for input validation",
    "database: marks tests that require database",
    "api: marks tests for API endpoints",
    "stress: marks tests as stress tests",
    "benchmark: marks tests as benchmark tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
target-version = ["py311"]
line-length = 100
skip-string-normalization = true
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without explicit cause
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "SIM"]
"migrations/**/*" = ["ARG", "SIM", "UP"]

[tool.ruff.isort]
known-first-party = ["app"]
force-single-line = true

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "anthropic.*",
    "celery.*",
    "libtmux.*",
    "pgvector.*",
    "prometheus_client.*",
    "redis.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used, shell_injection (handled by ruff)

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0"
tag_format = "v$version"
version_files = [
    "app/__init__.py",
    "pyproject.toml:version"
]

# === ALEMBIC CONFIGURATION ===
[tool.alembic]
script_location = "migrations"
prepend_sys_path = ["."]
version_path_separator = "os"
sqlalchemy.url = "postgresql://leanvibe_user:password@localhost:5432/leanvibe_agent_hive"

# === DEPLOYMENT CONFIGURATION ===
[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:app tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]