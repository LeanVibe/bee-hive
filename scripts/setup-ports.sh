#!/bin/bash

# LeanVibe Agent Hive - Port Configuration Setup Script
# Automatically configure non-standard ports to avoid conflicts

set -euo pipefail

# Color codes
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
readonly PORTS_FILE="$PROJECT_ROOT/.env.ports"
readonly ENV_LOCAL_FILE="$PROJECT_ROOT/.env.local"

log() {
    local level="$1"
    shift
    local message="$*"
    
    case "$level" in
        "INFO")  echo -e "${BLUE}[INFO]${NC}  $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC}  $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $message" ;;
    esac
}

check_port_available() {
    local port="$1"
    if command -v lsof >/dev/null 2>&1; then
        ! lsof -i ":$port" >/dev/null 2>&1
    elif command -v netstat >/dev/null 2>&1; then
        ! netstat -an | grep -q ":$port "
    else
        # Fallback: try to bind to the port
        if command -v nc >/dev/null 2>&1; then
            ! nc -z localhost "$port" 2>/dev/null
        else
            # Last resort: assume available
            true
        fi
    fi
}

find_available_port() {
    local start_port="$1"
    local max_attempts="${2:-100}"
    
    for ((i=0; i<max_attempts; i++)); do
        local port=$((start_port + i))
        if check_port_available "$port"; then
            echo "$port"
            return 0
        fi
    done
    
    log "ERROR" "Could not find available port starting from $start_port"
    return 1
}

setup_port_configuration() {
    log "INFO" "Setting up LeanVibe Agent Hive port configuration..."
    
    # Load current .env.ports file
    if [[ ! -f "$PORTS_FILE" ]]; then
        log "ERROR" "Port configuration file not found: $PORTS_FILE"
        return 1
    fi
    
    # Create .env.local if it doesn't exist
    if [[ ! -f "$ENV_LOCAL_FILE" ]]; then
        log "INFO" "Creating .env.local file..."
        cat > "$ENV_LOCAL_FILE" << 'EOF'
# LeanVibe Agent Hive - Local Environment Configuration
# This file is for local development settings and should not be committed

# Security
SECRET_KEY=leanvibe_super_secret_development_key_change_in_production
ANTHROPIC_API_KEY=

# Database
POSTGRES_PASSWORD=leanvibe_secure_pass
REDIS_PASSWORD=leanvibe_redis_pass

# Environment
ENVIRONMENT=development
LOG_LEVEL=INFO
DEBUG=true

# CORS Origins (for development)
CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5173

EOF
        log "SUCCESS" "Created .env.local file"
    fi
    
    # Source the ports configuration
    source "$PORTS_FILE"
    
    # Check and suggest ports
    local ports_to_check=(
        "POSTGRES_PORT:5433:PostgreSQL Database"
        "REDIS_PORT:6380:Redis Cache"
        "MAIN_API_PORT:8100:Main API"
        "PROJECT_INDEX_PORT:8101:Project Index API"
        "DASHBOARD_PORT:3001:Dashboard"
        "GRAFANA_PORT:3101:Grafana"
        "PGADMIN_PORT:5150:pgAdmin"
    )
    
    local conflicts_found=false
    local suggestions=()
    
    for port_config in "${ports_to_check[@]}"; do
        IFS=':' read -r var_name default_port description <<< "$port_config"
        
        # Get the configured port value
        local configured_port="${!var_name:-$default_port}"
        
        if ! check_port_available "$configured_port"; then
            conflicts_found=true
            log "WARN" "Port $configured_port ($description) is in use"
            
            # Find alternative port
            local new_port
            if new_port=$(find_available_port "$((configured_port + 10))"); then
                suggestions+=("$var_name:$configured_port:$new_port:$description")
                log "INFO" "Suggested alternative for $description: $new_port"
            fi
        else
            log "SUCCESS" "Port $configured_port ($description) is available"
        fi
    done
    
    if [[ "$conflicts_found" == true ]]; then
        echo
        log "WARN" "Port conflicts detected! Here are the suggested changes:"
        echo
        
        for suggestion in "${suggestions[@]}"; do
            IFS=':' read -r var_name old_port new_port description <<< "$suggestion"
            echo "  $var_name: $old_port → $new_port ($description)"
        done
        
        echo
        read -p "Apply these changes to .env.local? [y/N] " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            # Append port overrides to .env.local
            echo "" >> "$ENV_LOCAL_FILE"
            echo "# Port Configuration Overrides (generated by setup-ports.sh)" >> "$ENV_LOCAL_FILE"
            echo "# $(date)" >> "$ENV_LOCAL_FILE"
            
            for suggestion in "${suggestions[@]}"; do
                IFS=':' read -r var_name old_port new_port description <<< "$suggestion"
                echo "$var_name=$new_port  # $description (was $old_port)" >> "$ENV_LOCAL_FILE"
            done
            
            log "SUCCESS" "Updated .env.local with port overrides"
        else
            log "INFO" "Port configuration unchanged"
        fi
    else
        log "SUCCESS" "All configured ports are available!"
    fi
}

generate_docker_env() {
    log "INFO" "Generating Docker environment file..."
    
    # Create or update .env file for docker-compose
    cat > "$PROJECT_ROOT/.env" << 'EOF'
# LeanVibe Agent Hive - Docker Compose Environment
# Auto-generated by setup-ports.sh

# Source port configuration
EOF
    
    # Append port configuration
    grep -E '^[A-Z_]+=\d+' "$PORTS_FILE" >> "$PROJECT_ROOT/.env" || true
    
    # Append other env vars if .env.local exists
    if [[ -f "$ENV_LOCAL_FILE" ]]; then
        echo "" >> "$PROJECT_ROOT/.env"
        echo "# From .env.local" >> "$PROJECT_ROOT/.env"
        grep -E '^[A-Z_]+=' "$ENV_LOCAL_FILE" | grep -v '_PORT=' >> "$PROJECT_ROOT/.env" || true
    fi
    
    log "SUCCESS" "Generated .env file for Docker Compose"
}

show_configuration_summary() {
    echo
    log "INFO" "Port Configuration Summary:"
    echo "----------------------------------------"
    
    # Source the configuration
    source "$PORTS_FILE"
    [[ -f "$ENV_LOCAL_FILE" ]] && source "$ENV_LOCAL_FILE"
    
    local services=(
        "POSTGRES_PORT:PostgreSQL Database"
        "REDIS_PORT:Redis Cache"
        "MAIN_API_PORT:Main API Server"
        "PROJECT_INDEX_PORT:Project Index API"
        "DASHBOARD_PORT:Web Dashboard"
        "GRAFANA_PORT:Grafana Monitoring"
    )
    
    for service_config in "${services[@]}"; do
        IFS=':' read -r var_name description <<< "$service_config"
        local port="${!var_name:-unknown}"
        local status="❓"
        
        if [[ "$port" != "unknown" ]]; then
            if check_port_available "$port"; then
                status="✅"
            else
                status="🔴"
            fi
        fi
        
        printf "  %-25s %5s %s\n" "$description" "$port" "$status"
    done
    
    echo
    echo "✅ = Available  🔴 = In Use  ❓ = Unknown"
    echo
}

show_access_links() {
    source "$PORTS_FILE"
    [[ -f "$ENV_LOCAL_FILE" ]] && source "$ENV_LOCAL_FILE"
    
    echo
    log "INFO" "Service Access Links:"
    echo "----------------------------------------"
    
    local hostname="localhost"
    if command -v hostname >/dev/null 2>&1; then
        hostname=$(hostname)
    fi
    
    echo "  Main API:       http://localhost:${MAIN_API_PORT:-8100}"
    echo "  Web Dashboard:  http://localhost:${DASHBOARD_PORT:-3001}"
    echo "  Project Index:  http://localhost:${PROJECT_INDEX_PORT:-8101}"
    echo "  Grafana:        http://localhost:${GRAFANA_PORT:-3101}"
    echo "  pgAdmin:        http://localhost:${PGADMIN_PORT:-5150}"
    echo
}

main() {
    case "${1:-setup}" in
        "check")
            log "INFO" "Checking port availability..."
            show_configuration_summary
            ;;
        "setup")
            setup_port_configuration
            generate_docker_env
            show_configuration_summary
            show_access_links
            ;;
        "links")
            show_access_links
            ;;
        "summary")
            show_configuration_summary
            ;;
        "--help"|"-h")
            cat << EOF
LeanVibe Agent Hive - Port Configuration Setup

USAGE:
    $0 [COMMAND]

COMMANDS:
    setup     Configure ports and generate environment files (default)
    check     Check current port availability
    links     Show service access links
    summary   Show port configuration summary
    
EXAMPLES:
    $0              # Run full setup
    $0 check        # Check port availability
    $0 links        # Show access URLs
EOF
            ;;
        *)
            log "ERROR" "Unknown command: $1"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"