{"version":"1.132.1","results":[{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"app/api/self_modification_endpoints.py","start":{"line":753,"col":12,"offset":30085},"end":{"line":753,"col":64,"offset":30137},"extra":{"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.performance.performance-improvements.len-all-count","path":"app/api/v1/agents.py","start":{"line":115,"col":17,"offset":4061},"end":{"line":115,"col":50,"offset":4094},"extra":{"message":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","metadata":{"category":"performance","technology":["sqlalchemy"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count","shortlink":"https://sg.run/4y8g"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"app/api/v1/autonomous_development.py","start":{"line":541,"col":26,"offset":18534},"end":{"line":541,"col":68,"offset":18576},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"app/api/v1/autonomous_development.py","start":{"line":542,"col":32,"offset":18609},"end":{"line":542,"col":129,"offset":18706},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"app/api/v1/autonomous_development.py","start":{"line":549,"col":32,"offset":18988},"end":{"line":549,"col":163,"offset":19119},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"app/api/v1/autonomous_development.py","start":{"line":574,"col":32,"offset":20336},"end":{"line":574,"col":123,"offset":20427},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"app/api/v1/autonomous_development.py","start":{"line":586,"col":32,"offset":20801},"end":{"line":586,"col":126,"offset":20895},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"app/api/v1/autonomous_development.py","start":{"line":600,"col":32,"offset":21538},"end":{"line":600,"col":83,"offset":21589},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"app/cli/setup.py","start":{"line":92,"col":13,"offset":2720},"end":{"line":92,"col":41,"offset":2748},"extra":{"message":"These permissions `0o755` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.eval-detected.eval-detected","path":"app/core/adaptive_scaler.py","start":{"line":106,"col":25,"offset":3833},"end":{"line":106,"col":81,"offset":3889},"extra":{"message":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval","cwe":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"],"owasp":["A03:2021 - Injection"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected","shortlink":"https://sg.run/ZvrD"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"app/core/advanced_rate_limiter.py","start":{"line":730,"col":13,"offset":27687},"end":{"line":730,"col":39,"offset":27713},"extra":{"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"app/core/advanced_rate_limiter.py","start":{"line":733,"col":13,"offset":27841},"end":{"line":733,"col":39,"offset":27867},"extra":{"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/advanced_vector_search.py","start":{"line":864,"col":35,"offset":33168},"end":{"line":864,"col":50,"offset":33183},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.performance.performance-improvements.len-all-count","path":"app/core/branch_manager.py","start":{"line":946,"col":54,"offset":39075},"end":{"line":946,"col":88,"offset":39109},"extra":{"message":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","metadata":{"category":"performance","technology":["sqlalchemy"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count","shortlink":"https://sg.run/4y8g"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.performance.performance-improvements.len-all-count","path":"app/core/branch_manager.py","start":{"line":958,"col":58,"offset":39649},"end":{"line":958,"col":92,"offset":39683},"extra":{"message":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","metadata":{"category":"performance","technology":["sqlalchemy"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count","shortlink":"https://sg.run/4y8g"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"app/core/command_registry.py","start":{"line":393,"col":32,"offset":14550},"end":{"line":393,"col":64,"offset":14582},"extra":{"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/context_analytics.py","start":{"line":366,"col":31,"offset":13126},"end":{"line":380,"col":17,"offset":13985},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/context_analytics.py","start":{"line":386,"col":34,"offset":14179},"end":{"line":399,"col":17,"offset":14715},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/context_analytics.py","start":{"line":414,"col":33,"offset":15345},"end":{"line":424,"col":17,"offset":15751},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/context_analytics.py","start":{"line":494,"col":27,"offset":18725},"end":{"line":523,"col":17,"offset":20010},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.eval-detected.eval-detected","path":"app/core/custom_metrics_exporter.py","start":{"line":377,"col":33,"offset":14167},"end":{"line":377,"col":43,"offset":14177},"extra":{"message":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval","cwe":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"],"owasp":["A03:2021 - Injection"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected","shortlink":"https://sg.run/ZvrD"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"app/core/enhanced_jwt_manager.py","start":{"line":642,"col":74,"offset":24568},"end":{"line":642,"col":79,"offset":24573},"extra":{"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.non-literal-import.non-literal-import","path":"app/core/enhanced_tool_registry.py","start":{"line":451,"col":25,"offset":16631},"end":{"line":451,"col":53,"offset":16659},"extra":{"message":"Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.","metadata":{"owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-706: Use of Incorrectly-Resolved Name or Reference"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import","shortlink":"https://sg.run/y6Jk"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":716,"col":43,"offset":27088},"end":{"line":716,"col":95,"offset":27140},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":748,"col":35,"offset":28419},"end":{"line":748,"col":51,"offset":28435},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":771,"col":35,"offset":29394},"end":{"line":771,"col":87,"offset":29446},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":801,"col":35,"offset":30699},"end":{"line":801,"col":51,"offset":30715},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":815,"col":35,"offset":31246},"end":{"line":815,"col":114,"offset":31325},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":819,"col":35,"offset":31452},"end":{"line":819,"col":107,"offset":31524},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":832,"col":35,"offset":32113},"end":{"line":832,"col":64,"offset":32142},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":841,"col":35,"offset":32572},"end":{"line":841,"col":63,"offset":32600},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/index_management.py","start":{"line":926,"col":58,"offset":36544},"end":{"line":930,"col":25,"offset":36749},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.performance.performance-improvements.len-all-count","path":"app/core/issue_manager.py","start":{"line":1020,"col":28,"offset":40169},"end":{"line":1020,"col":61,"offset":40202},"extra":{"message":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","metadata":{"category":"performance","technology":["sqlalchemy"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count","shortlink":"https://sg.run/4y8g"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.performance.performance-improvements.len-all-count","path":"app/core/issue_manager.py","start":{"line":1026,"col":27,"offset":40402},"end":{"line":1026,"col":59,"offset":40434},"extra":{"message":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","metadata":{"category":"performance","technology":["sqlalchemy"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count","shortlink":"https://sg.run/4y8g"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.performance.performance-improvements.len-all-count","path":"app/core/issue_manager.py","start":{"line":1032,"col":29,"offset":40642},"end":{"line":1032,"col":63,"offset":40676},"extra":{"message":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","metadata":{"category":"performance","technology":["sqlalchemy"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count","shortlink":"https://sg.run/4y8g"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.performance.performance-improvements.len-all-count","path":"app/core/issue_manager.py","start":{"line":1038,"col":31,"offset":40893},"end":{"line":1038,"col":67,"offset":40929},"extra":{"message":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","metadata":{"category":"performance","technology":["sqlalchemy"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count","shortlink":"https://sg.run/4y8g"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"app/core/leanvibe_hooks_system.py","start":{"line":1148,"col":13,"offset":44953},"end":{"line":1148,"col":41,"offset":44981},"extra":{"message":"These permissions `0o755` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"app/core/onboarding_automation.py","start":{"line":752,"col":31,"offset":24295},"end":{"line":752,"col":35,"offset":24299},"extra":{"message":"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"app/core/optimized_embedding_pipeline.py","start":{"line":719,"col":33,"offset":26248},"end":{"line":719,"col":62,"offset":26277},"extra":{"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"app/core/optimized_embedding_pipeline.py","start":{"line":738,"col":35,"offset":26983},"end":{"line":738,"col":58,"offset":27006},"extra":{"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/optimized_pgvector_manager.py","start":{"line":290,"col":43,"offset":10617},"end":{"line":290,"col":61,"offset":10635},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/optimized_pgvector_manager.py","start":{"line":334,"col":39,"offset":12610},"end":{"line":334,"col":77,"offset":12648},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/optimized_pgvector_manager.py","start":{"line":335,"col":39,"offset":12688},"end":{"line":335,"col":72,"offset":12721},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/optimized_pgvector_manager.py","start":{"line":440,"col":48,"offset":16877},"end":{"line":440,"col":63,"offset":16892},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/pgvector_manager.py","start":{"line":181,"col":35,"offset":6905},"end":{"line":181,"col":94,"offset":6964},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/pgvector_manager.py","start":{"line":338,"col":33,"offset":13625},"end":{"line":351,"col":29,"offset":14424},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/pgvector_manager.py","start":{"line":459,"col":25,"offset":19011},"end":{"line":464,"col":21,"offset":19223},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/pgvector_manager.py","start":{"line":467,"col":39,"offset":19327},"end":{"line":467,"col":98,"offset":19386},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"app/core/pgvector_manager.py","start":{"line":589,"col":25,"offset":24404},"end":{"line":596,"col":21,"offset":24782},"extra":{"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.eval-detected.eval-detected","path":"app/core/resource_optimizer.py","start":{"line":128,"col":25,"offset":4436},"end":{"line":128,"col":89,"offset":4500},"extra":{"message":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval","cwe":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"],"owasp":["A03:2021 - Injection"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected","shortlink":"https://sg.run/ZvrD"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"app/core/secure_code_executor.py","start":{"line":341,"col":9,"offset":12097},"end":{"line":341,"col":40,"offset":12128},"extra":{"message":"These permissions `0o755` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"app/core/security_performance_validator.py","start":{"line":289,"col":21,"offset":10987},"end":{"line":289,"col":79,"offset":11045},"extra":{"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.eval-detected.eval-detected","path":"app/core/stream_monitor.py","start":{"line":590,"col":24,"offset":21615},"end":{"line":590,"col":80,"offset":21671},"extra":{"message":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval","cwe":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"],"owasp":["A03:2021 - Injection"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected","shortlink":"https://sg.run/ZvrD"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","path":"app/schemas/security.py","start":{"line":505,"col":34,"offset":21461},"end":{"line":505,"col":47,"offset":21474},"extra":{"message":"Google OAuth Access Token detected","metadata":{"cwe":["CWE-798: Use of Hard-coded Credentials"],"source-rule-url":"https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json","category":"security","technology":["secrets","google"],"confidence":"LOW","owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","shortlink":"https://sg.run/ox2n"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":["PartialParsing",[{"path":"app/templates/roi_calculator.html","start":{"line":165,"col":69,"offset":0},"end":{"line":165,"col":81,"offset":12}},{"path":"app/templates/roi_calculator.html","start":{"line":166,"col":59,"offset":0},"end":{"line":166,"col":67,"offset":8}}]],"message":"Syntax error at line app/templates/roi_calculator.html:165:\n `& Industrial` was unexpected","path":"app/templates/roi_calculator.html","spans":[{"file":"app/templates/roi_calculator.html","start":{"line":165,"col":69,"offset":0},"end":{"line":165,"col":81,"offset":12}},{"file":"app/templates/roi_calculator.html","start":{"line":166,"col":59,"offset":0},"end":{"line":166,"col":67,"offset":8}}]}],"paths":{"scanned":["app/__init__.py","app/agents/runtime.py","app/api/CLAUDE.md","app/api/__init__.py","app/api/agent_activation.py","app/api/analytics.py","app/api/auth_endpoints.py","app/api/claude_integration.py","app/api/coordination_endpoints.py","app/api/dashboard_compat.py","app/api/dashboard_monitoring.py","app/api/dashboard_prometheus.py","app/api/dashboard_task_management.py","app/api/dashboard_websockets.py","app/api/dx_debugging.py","app/api/enterprise_pilots.py","app/api/enterprise_sales.py","app/api/enterprise_security.py","app/api/hive_commands.py","app/api/intelligence.py","app/api/intelligent_scheduling.py","app/api/memory_operations.py","app/api/mobile_monitoring.py","app/api/monitoring_reporting.py","app/api/observability.py","app/api/observability_hooks.py","app/api/performance_intelligence.py","app/api/routes.py","app/api/security_endpoints.py","app/api/self_modification_endpoints.py","app/api/sleep_management.py","app/api/strategic_monitoring.py","app/api/v1/__init__.py","app/api/v1/advanced_coordination_dashboard.py","app/api/v1/advanced_github_integration.py","app/api/v1/advanced_orchestration.py","app/api/v1/agents.py","app/api/v1/automated_scheduler_vs7_2.py","app/api/v1/autonomous_development.py","app/api/v1/autonomous_self_modification.py","app/api/v1/code_execution.py","app/api/v1/communication.py","app/api/v1/comprehensive_dashboard.py","app/api/v1/consumer_groups.py","app/api/v1/context_compression.py","app/api/v1/context_monitoring.py","app/api/v1/contexts.py","app/api/v1/coordination.py","app/api/v1/coordination_dashboard.py","app/api/v1/coordination_monitoring.py","app/api/v1/custom_commands.py","app/api/v1/customer_success_comprehensive.py","app/api/v1/dlq.py","app/api/v1/dlq_management.py","app/api/v1/enhanced_context_engine.py","app/api/v1/enhanced_coordination_api.py","app/api/v1/enhanced_observability.py","app/api/v1/enhanced_observability_api.py","app/api/v1/enhanced_security.py","app/api/v1/enhanced_tools.py","app/api/v1/error_handling_health.py","app/api/v1/external_tools.py","app/api/v1/github_integration.py","app/api/v1/global_coordination.py","app/api/v1/memory_analytics.py","app/api/v1/multi_agent_coordination.py","app/api/v1/oauth.py","app/api/v1/observability.py","app/api/v1/observability_dashboard.py","app/api/v1/observability_production_api.py","app/api/v1/observability_websocket.py","app/api/v1/orchestrator_core.py","app/api/v1/performance_testing.py","app/api/v1/persona.py","app/api/v1/production_service_delivery.py","app/api/v1/prompt_optimization.py","app/api/v1/security.py","app/api/v1/security_dashboard.py","app/api/v1/self_modification.py","app/api/v1/semantic_memory.py","app/api/v1/sessions.py","app/api/v1/sleep_wake.py","app/api/v1/sleep_wake_vs7_1.py","app/api/v1/system.py","app/api/v1/tasks.py","app/api/v1/team_coordination.py","app/api/v1/team_coordination_docs.py","app/api/v1/transcript_analysis.py","app/api/v1/ultra_compression.py","app/api/v1/websocket.py","app/api/v1/workflows.py","app/api/v1/workspaces.py","app/api/ws_utils.py","app/cli/__init__.py","app/cli/integration.py","app/cli/main.py","app/cli/setup.py","app/cli/unix_commands.py","app/cli.py","app/config/semantic_memory_config.py","app/core/CLAUDE.md","app/core/__init__.py","app/core/ab_testing_engine.py","app/core/access_control.py","app/core/adaptive_scaler.py","app/core/advanced_ai_capabilities.py","app/core/advanced_analytics_engine.py","app/core/advanced_conflict_resolution_engine.py","app/core/advanced_context_engine.py","app/core/advanced_orchestration_engine.py","app/core/advanced_rate_limiter.py","app/core/advanced_repository_management.py","app/core/advanced_security_validator.py","app/core/advanced_vector_search.py","app/core/agent_communication_service.py","app/core/agent_identity_service.py","app/core/agent_knowledge_manager.py","app/core/agent_lifecycle_hooks.py","app/core/agent_lifecycle_manager.py","app/core/agent_load_balancer.py","app/core/agent_messaging_service.py","app/core/agent_persona_system.py","app/core/agent_registry.py","app/core/agent_spawner.py","app/core/agent_workflow_tracker.py","app/core/ai_architect_agent.py","app/core/ai_enhancement_team.py","app/core/ai_gateway.py","app/core/ai_model_integration.py","app/core/ai_task_worker.py","app/core/alert_analysis_engine.py","app/core/api_key_manager.py","app/core/api_security_middleware.py","app/core/audit_logger.py","app/core/auth.py","app/core/auth_metrics.py","app/core/authorization_engine.py","app/core/automated_orchestrator.py","app/core/automated_testing_integration.py","app/core/automation_engine.py","app/core/autonomous_development_engine.py","app/core/autonomous_project_execution.py","app/core/autonomous_quality_gates.py","app/core/backpressure_manager.py","app/core/branch_manager.py","app/core/capability_matcher.py","app/core/capacity_manager.py","app/core/capacity_planning.py","app/core/chat_transcript_manager.py","app/core/checkpoint_manager.py","app/core/circuit_breaker.py","app/core/claude_code_hooks.py","app/core/cli_agent_orchestrator.py","app/core/code_execution.py","app/core/code_intelligence_agent.py","app/core/code_review_assistant.py","app/core/collaboration.py","app/core/command_executor.py","app/core/command_registry.py","app/core/command_templates.py","app/core/communication.py","app/core/communication_analyzer.py","app/core/compliance_framework.py","app/core/comprehensive_audit_system.py","app/core/comprehensive_dashboard_integration.py","app/core/config.py","app/core/consolidation_engine.py","app/core/consumer_group_coordinator.py","app/core/container_orchestrator.py","app/core/context_adapter.py","app/core/context_analytics.py","app/core/context_cache_manager.py","app/core/context_compression.py","app/core/context_compression_engine.py","app/core/context_consolidation_triggers.py","app/core/context_consolidator.py","app/core/context_engine_integration.py","app/core/context_lifecycle_manager.py","app/core/context_manager.py","app/core/context_memory_manager.py","app/core/context_orchestrator_integration.py","app/core/context_performance_monitor.py","app/core/context_relevance_scorer.py","app/core/conversation_debugging_tools.py","app/core/conversation_search_engine.py","app/core/coordination.py","app/core/coordination_dashboard.py","app/core/correlation.py","app/core/cost_monitoring.py","app/core/cross_agent_knowledge_manager.py","app/core/custom_metrics_exporter.py","app/core/customer_expansion_engine.py","app/core/customer_onboarding_engine.py","app/core/dashboard_integration.py","app/core/dashboard_metrics_streaming.py","app/core/database.py","app/core/database_models.py","app/core/database_performance_validator.py","app/core/database_types.py","app/core/dead_letter_queue.py","app/core/dead_letter_queue_handler.py","app/core/dependency_graph_builder.py","app/core/distributed_load_balancing_state.py","app/core/dlq_monitoring.py","app/core/dlq_retry_scheduler.py","app/core/embedding_service.py","app/core/embedding_service_simple.py","app/core/embeddings.py","app/core/enhanced_agent_implementations.py","app/core/enhanced_communication_load_testing.py","app/core/enhanced_context_consolidator.py","app/core/enhanced_context_engine.py","app/core/enhanced_coordination_bridge.py","app/core/enhanced_coordination_commands.py","app/core/enhanced_coordination_database_integration.py","app/core/enhanced_failure_recovery_manager.py","app/core/enhanced_git_checkpoint_manager.py","app/core/enhanced_github_integration.py","app/core/enhanced_intelligent_task_router.py","app/core/enhanced_jwt_manager.py","app/core/enhanced_lifecycle_hooks.py","app/core/enhanced_memory_manager.py","app/core/enhanced_multi_agent_coordination.py","app/core/enhanced_orchestrator_integration.py","app/core/enhanced_redis_streams_manager.py","app/core/enhanced_security_audit.py","app/core/enhanced_security_safeguards.py","app/core/enhanced_sleep_wake_integration.py","app/core/enhanced_state_manager.py","app/core/enhanced_tool_registry.py","app/core/enhanced_vector_search.py","app/core/enhanced_workflow_engine.py","app/core/enterprise_backpressure_manager.py","app/core/enterprise_compliance.py","app/core/enterprise_compliance_system.py","app/core/enterprise_consumer_group_manager.py","app/core/enterprise_demo_orchestrator.py","app/core/enterprise_observability.py","app/core/enterprise_pilot_manager.py","app/core/enterprise_roi_tracker.py","app/core/enterprise_secrets_manager.py","app/core/enterprise_security_system.py","app/core/enterprise_tmux_manager.py","app/core/error_handling_config.py","app/core/error_handling_integration.py","app/core/error_handling_middleware.py","app/core/event_processor.py","app/core/event_serialization.py","app/core/evolutionary_optimizer.py","app/core/executive_command_center.py","app/core/executive_engagement_automation.py","app/core/extended_thinking_engine.py","app/core/external_tools.py","app/core/feature_flag_manager.py","app/core/feedback_analyzer.py","app/core/git_checkpoint_optimizer.py","app/core/github_api_client.py","app/core/github_quality_integration.py","app/core/github_security.py","app/core/github_webhooks.py","app/core/global_coordination_integration.py","app/core/global_deployment_orchestration.py","app/core/graceful_degradation.py","app/core/gradient_optimizer.py","app/core/health_monitor.py","app/core/health_monitoring.py","app/core/high_concurrency_orchestrator.py","app/core/hive_slash_commands.py","app/core/hook_interceptors.py","app/core/hook_lifecycle_system.py","app/core/hook_performance_benchmarks.py","app/core/hook_processor.py","app/core/hybrid_search_engine.py","app/core/index_management.py","app/core/integrated_security_system.py","app/core/integrated_system_performance_validator.py","app/core/intelligence_framework.py","app/core/intelligent_alerting.py","app/core/intelligent_retry_scheduler.py","app/core/intelligent_sleep_manager.py","app/core/intelligent_task_router.py","app/core/intelligent_workflow_automation.py","app/core/international_operations_management.py","app/core/issue_manager.py","app/core/knowledge_graph_builder.py","app/core/leanvibe_hooks_system.py","app/core/load_balancing_benchmarks.py","app/core/load_prediction_service.py","app/core/load_testing.py","app/core/memory_aware_vector_search.py","app/core/memory_consolidation_service.py","app/core/memory_hierarchy_manager.py","app/core/message_processor.py","app/core/meta_learning_engine.py","app/core/mfa_system.py","app/core/mobile_api_cache.py","app/core/multi_agent_commands.py","app/core/multi_tenant_architecture.py","app/core/oauth_authentication_system.py","app/core/oauth_provider_system.py","app/core/observability_hooks.py","app/core/observability_performance_testing.py","app/core/observability_streams.py","app/core/onboarding_automation.py","app/core/optimized_embedding_pipeline.py","app/core/optimized_pgvector_manager.py","app/core/optimized_redis.py","app/core/orchestrator.py","app/core/orchestrator_hook_integration.py","app/core/orchestrator_load_balancing_integration.py","app/core/orchestrator_load_testing.py","app/core/orchestrator_shared_state_integration.py","app/core/parallel_pilot_deployment.py","app/core/performance_benchmarks.py","app/core/performance_evaluator.py","app/core/performance_metrics_collector.py","app/core/performance_metrics_publisher.py","app/core/performance_monitoring.py","app/core/performance_monitoring_dashboard.py","app/core/performance_optimization_advisor.py","app/core/performance_optimizations.py","app/core/performance_optimizer.py","app/core/performance_orchestrator.py","app/core/performance_storage_engine.py","app/core/performance_validator.py","app/core/pgvector_manager.py","app/core/pilot_infrastructure_orchestrator.py","app/core/poison_message_detector.py","app/core/production_api_security.py","app/core/production_orchestrator.py","app/core/productivity_intelligence.py","app/core/prometheus_exporter.py","app/core/prompt_generator.py","app/core/prompt_optimizer.py","app/core/pull_request_automator.py","app/core/quality_gates.py","app/core/rbac_engine.py","app/core/real_agent_implementations.py","app/core/real_multiagent_workflow.py","app/core/realtime_coordination_sync.py","app/core/realtime_dashboard_streaming.py","app/core/recovery_manager.py","app/core/redis.py","app/core/redis_pubsub_manager.py","app/core/resource_optimizer.py","app/core/retry_policies.py","app/core/sandbox/__init__.py","app/core/sandbox/demo_scenarios.py","app/core/sandbox/mock_anthropic_client.py","app/core/sandbox/sandbox_config.py","app/core/sandbox/sandbox_orchestrator.py","app/core/search_analytics.py","app/core/secret_manager.py","app/core/secure_code_executor.py","app/core/security.py","app/core/security_audit.py","app/core/security_middleware.py","app/core/security_monitoring_system.py","app/core/security_orchestrator_integration.py","app/core/security_performance_validator.py","app/core/security_policy_engine.py","app/core/security_validation_middleware.py","app/core/self_improvement.py","app/core/self_modification/__init__.py","app/core/self_modification/code_analysis_engine.py","app/core/self_modification/modification_generator.py","app/core/self_modification/performance_monitor.py","app/core/self_modification/safety_validator.py","app/core/self_modification/sandbox_environment.py","app/core/self_modification/self_modification_service.py","app/core/self_modification/version_control_manager.py","app/core/self_modification_code_analyzer.py","app/core/self_modification_generator.py","app/core/self_modification_git_manager.py","app/core/self_modification_safety_validator.py","app/core/self_modification_sandbox.py","app/core/self_optimization_agent.py","app/core/semantic_embedding_service.py","app/core/semantic_integrity_validator.py","app/core/semantic_memory_integration.py","app/core/semantic_memory_task_processor.py","app/core/shared_world_state.py","app/core/slash_commands.py","app/core/sleep_analytics.py","app/core/sleep_scheduler.py","app/core/sleep_wake_context_optimizer.py","app/core/sleep_wake_manager.py","app/core/sleep_wake_performance_testing.py","app/core/sleep_wake_system.py","app/core/smart_scheduler.py","app/core/strategic_implementation_engine.py","app/core/strategic_intelligence_system.py","app/core/strategic_market_analytics.py","app/core/stream_monitor.py","app/core/task_batch_executor.py","app/core/task_distributor.py","app/core/task_execution_engine.py","app/core/task_queue.py","app/core/task_scheduler.py","app/core/team_coordination_error_handler.py","app/core/team_coordination_metrics.py","app/core/team_coordination_redis.py","app/core/threat_detection_engine.py","app/core/tmux_session_manager.py","app/core/transcript_streaming.py","app/core/unified_dlq_service.py","app/core/unified_production_orchestrator.py","app/core/updater.py","app/core/user_preference_system.py","app/core/vector_search.py","app/core/vector_search_engine.py","app/core/vertical_slice_2_1_integration.py","app/core/vertical_slice_integration.py","app/core/vertical_slice_orchestrator.py","app/core/vs_2_1_performance_validator.py","app/core/webauthn_system.py","app/core/weekly_milestone_framework.py","app/core/work_tree_manager.py","app/core/workflow_context_manager.py","app/core/workflow_engine.py","app/core/workflow_engine_error_handling.py","app/core/workflow_intelligence.py","app/core/workflow_message_router.py","app/core/workflow_state_manager.py","app/core/workspace_manager.py","app/dx_cli.py","app/main.py","app/models/__init__.py","app/models/agent.py","app/models/agent_performance.py","app/models/alert.py","app/models/context.py","app/models/conversation.py","app/models/coordination.py","app/models/coordination_event.py","app/models/github_integration.py","app/models/message.py","app/models/observability.py","app/models/performance_metric.py","app/models/persona.py","app/models/prompt_optimization.py","app/models/security.py","app/models/self_modification.py","app/models/session.py","app/models/sleep_wake.py","app/models/strategic_monitoring.py","app/models/system_checkpoint.py","app/models/task.py","app/models/user.py","app/models/workflow.py","app/monitoring/hook_performance_monitor.py","app/monitoring/semantic_memory_metrics.py","app/observability/__init__.py","app/observability/alerting.py","app/observability/custom_commands_hooks.py","app/observability/enhanced_prometheus_integration.py","app/observability/enhanced_websocket_streaming.py","app/observability/external_hooks.py","app/observability/hooks/README.md","app/observability/hooks/__init__.py","app/observability/hooks/hooks_config.py","app/observability/hooks/hooks_integration.py","app/observability/hooks/post_tool_use.py","app/observability/hooks/pre_tool_use.py","app/observability/hooks/session_lifecycle.py","app/observability/hooks.py","app/observability/intelligent_alerting_system.py","app/observability/intelligent_filtering.py","app/observability/middleware.py","app/observability/observability_orchestrator.py","app/observability/predictive_analytics_engine.py","app/observability/prometheus_exporter.py","app/observability/prometheus_middleware.py","app/observability/real_time_hooks.py","app/observability/real_time_processor.py","app/observability/vs7_1_hooks.py","app/observability/vs7_2_monitoring.py","app/schemas/__init__.py","app/schemas/agent.py","app/schemas/base.py","app/schemas/context.py","app/schemas/custom_commands.py","app/schemas/github_integration.py","app/schemas/observability.py","app/schemas/prompt_optimization.py","app/schemas/security.py","app/schemas/self_modification.py","app/schemas/semantic_memory.py","app/schemas/session.py","app/schemas/task.py","app/schemas/team_coordination.py","app/schemas/workflow.py","app/sdk/messaging.py","app/services/comprehensive_monitoring_analytics.py","app/services/coordination_persistence_service.py","app/services/customer_success_service.py","app/services/event_collector_service.py","app/services/intelligent_alerting.py","app/services/legacy_modernization_service.py","app/services/semantic_memory_enhancements.py","app/services/semantic_memory_service.py","app/services/team_augmentation_service.py","app/templates/enterprise_demo.html","app/templates/pilot_program.html","app/templates/roi_calculator.html","app/workflow/semantic_nodes.py"]},"time":{"rules":[],"rules_parse_time":0.7814018726348877,"profiling_times":{"config_time":3.776956081390381,"core_time":10.542320728302002,"ignores_time":0.0006458759307861328,"total_time":14.3211030960083},"parsing_time":{"total_time":8.679437875747681,"per_file_time":{"mean":0.01732422729690156,"std_dev":0.0001691561980052533},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"scanning_time":{"total_time":130.74019312858582,"per_file_time":{"mean":0.08629715718058467,"std_dev":0.03316032147217224},"very_slow_stats":{"time_ratio":0.023114621568553952,"count_ratio":0.0006600660066006601},"very_slow_files":[{"fpath":"app/core/orchestrator.py","ftime":3.022010087966919}]},"matching_time":{"total_time":63.66612219810486,"per_file_and_rule_time":{"mean":0.005240441369504066,"std_dev":0.00010647414849459546},"very_slow_stats":{"time_ratio":0.020474673905286397,"count_ratio":0.0008231130134167421},"very_slow_rules_on_files":[{"fpath":"app/core/automated_testing_integration.py","rule_id":"python.django.security.injection.command.command-injection-os-system.command-injection-os-system","time":0.10542011260986328},{"fpath":"app/core/intelligent_workflow_automation.py","rule_id":"python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled","time":0.10584712028503418},{"fpath":"app/core/mfa_system.py","rule_id":"python.lang.security.dangerous-system-call.dangerous-system-call","time":0.10718202590942383},{"fpath":"app/core/advanced_repository_management.py","rule_id":"python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","time":0.11084294319152832},{"fpath":"app/core/workflow_engine.py","rule_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","time":0.11150598526000977},{"fpath":"app/core/cross_agent_knowledge_manager.py","rule_id":"python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","time":0.11334609985351562},{"fpath":"app/core/orchestrator.py","rule_id":"python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","time":0.139786958694458},{"fpath":"app/observability/custom_commands_hooks.py","rule_id":"python.django.security.injection.code.user-eval-format-string.user-eval-format-string","time":0.15383005142211914},{"fpath":"app/core/orchestrator.py","rule_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","time":0.1543879508972168},{"fpath":"app/core/orchestrator.py","rule_id":"python.lang.security.dangerous-system-call.dangerous-system-call","time":0.20139384269714355}]},"tainting_time":{"total_time":41.94654059410095,"per_def_and_rule_time":{"mean":0.0003862871984648624,"std_dev":4.007866561327244e-06},"very_slow_stats":{"time_ratio":0.047742605696191265,"count_ratio":0.00022101686174474394},"very_slow_rules_on_defs":[{"fpath":"app/services/semantic_memory_service.py","fline":289,"rule_id":"python.django.security.injection.raw-html-format.raw-html-format","time":0.0819239616394043},{"fpath":"app/core/orchestrator.py","fline":1190,"rule_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","time":0.08837485313415527},{"fpath":"app/core/parallel_pilot_deployment.py","fline":150,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.09018898010253906},{"fpath":"app/api/dashboard_task_management.py","fline":504,"rule_id":"python.django.security.nan-injection.nan-injection","time":0.09033298492431641},{"fpath":"app/api/dashboard_task_management.py","fline":842,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.09706711769104004},{"fpath":"app/api/dashboard_task_management.py","fline":36,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.10872197151184082},{"fpath":"app/core/prompt_optimizer.py","fline":927,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.10886001586914062},{"fpath":"app/api/observability_hooks.py","fline":502,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.12592387199401855},{"fpath":"app/api/observability_hooks.py","fline":276,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.18008017539978027},{"fpath":"app/services/comprehensive_monitoring_analytics.py","fline":672,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.2201550006866455}]},"fixpoint_timeouts":[],"targets":[],"total_bytes":0,"max_memory_bytes":1025287552},"engine_requested":"OSS","skipped_rules":[]}