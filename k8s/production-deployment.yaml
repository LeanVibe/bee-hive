# LeanVibe Agent Hive 2.0 - Production Kubernetes Deployment
# Enterprise-grade deployment with high availability, security, and monitoring

apiVersion: v1
kind: Namespace
metadata:
  name: leanvibe-production
  labels:
    name: leanvibe-production
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: leanvibe-config
  namespace: leanvibe-production
data:
  ENVIRONMENT: "production"
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  APP_NAME: "LeanVibe Agent Hive"
  APP_VERSION: "2.0.0"
  CORS_ORIGINS: "https://app.leanvibe.com,https://dashboard.leanvibe.com"
  ALLOWED_HOSTS: "leanvibe-api,api.leanvibe.com,*.leanvibe.com"
  PROMETHEUS_ENABLED: "true"
  PERFORMANCE_MONITORING_ENABLED: "true"
  ENABLE_WEBAUTHN: "true"
  ENABLE_GITHUB_INTEGRATION: "true"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: leanvibe-secrets
  namespace: leanvibe-production
type: Opaque
data:
  DATABASE_URL: <base64-encoded-database-url>
  REDIS_URL: <base64-encoded-redis-url>
  SECRET_KEY: <base64-encoded-secret-key>
  JWT_SECRET_KEY: <base64-encoded-jwt-secret>
  ANTHROPIC_API_KEY: <base64-encoded-anthropic-key>

---
# Service Account with RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: leanvibe-api
  namespace: leanvibe-production

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leanvibe-api-role
  namespace: leanvibe-production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leanvibe-api-binding
  namespace: leanvibe-production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leanvibe-api-role
subjects:
- kind: ServiceAccount
  name: leanvibe-api
  namespace: leanvibe-production

---
# Deployment for Blue-Green strategy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: leanvibe-api-blue
  namespace: leanvibe-production
  labels:
    app: leanvibe-api
    color: blue
    version: v2.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: leanvibe-api
      color: blue
  template:
    metadata:
      labels:
        app: leanvibe-api
        color: blue
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: leanvibe-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: leanvibe-api
        image: leanvibe/agent-hive:2.0.0-production
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        envFrom:
        - configMapRef:
            name: leanvibe-config
        - secretRef:
            name: leanvibe-secrets
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
            ephemeral-storage: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
            ephemeral-storage: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: Kubernetes-Healthcheck
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: Kubernetes-Healthcheck
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: workspaces
          mountPath: /app/workspaces
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: data
        emptyDir:
          sizeLimit: 1Gi
      - name: workspaces
        emptyDir:
          sizeLimit: 2Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - leanvibe-api
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node-role.kubernetes.io/production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Service for load balancing
apiVersion: v1
kind: Service
metadata:
  name: leanvibe-api
  namespace: leanvibe-production
  labels:
    app: leanvibe-api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  selector:
    app: leanvibe-api
    color: blue

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: leanvibe-api-hpa
  namespace: leanvibe-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: leanvibe-api-blue
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: leanvibe_agent_tasks_pending
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: leanvibe-api-pdb
  namespace: leanvibe-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: leanvibe-api

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: leanvibe-api-netpol
  namespace: leanvibe-production
spec:
  podSelector:
    matchLabels:
      app: leanvibe-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: leanvibe-api-ingress
  namespace: leanvibe-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.leanvibe.com
    secretName: leanvibe-api-tls
  rules:
  - host: api.leanvibe.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: leanvibe-api
            port:
              number: 80

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: leanvibe-api-monitor
  namespace: leanvibe-production
  labels:
    app: leanvibe-api
spec:
  selector:
    matchLabels:
      app: leanvibe-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - leanvibe-production