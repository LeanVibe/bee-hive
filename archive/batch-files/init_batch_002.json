{
  "batch_id": "init_batch_002",
  "files": [
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/dotenv/__init__.py",
      "current_size_lines": 40,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .main import (dotenv_values, find_dotenv, get_key, load_dotenv, set_key,",
        "    from .ipython import load_ipython_extension",
        "__all__ = ['get_cli_string',"
      ],
      "estimated_loc_savings": 32,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/ecdsa/__init__.py",
      "current_size_lines": 101,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .keys import (",
        "from .curves import (",
        "from .ecdh import (",
        "from .der import UnexpectedDER",
        "from . import _version",
        "__all__ = [",
        "__version__ = _version.get_versions()[\"version\"]"
      ],
      "estimated_loc_savings": 89,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/structlog/__init__.py",
      "current_size_lines": 108,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__author__ = \"Hynek Schlawack\"",
        "__copyright__ = \"Copyright (c) 2013 \" + __author__",
        "__all__ = [",
        "        \"__email__\": \"\",",
        "        \"__version__\": \"\",",
        "    if name != \"__version__\":",
        "    if name == \"__email__\":"
      ],
      "estimated_loc_savings": 96,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/annotated_types/__init__.py",
      "current_size_lines": 318,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__all__ = (",
        "    '__version__',",
        "__version__ = '0.7.0'"
      ],
      "estimated_loc_savings": 310,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/attrs/__init__.py",
      "current_size_lines": 64,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from . import converters, exceptions, filters, setters, validators",
        "__all__ = [",
        "    \"__author__\",",
        "    \"__email__\",",
        "    \"__version__\","
      ],
      "estimated_loc_savings": 54,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/s3transfer/__init__.py",
      "current_size_lines": 754,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__author__ = 'Amazon Web Services'",
        "__version__ = '0.13.1'"
      ],
      "estimated_loc_savings": 747,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/oauthlib/__init__.py",
      "current_size_lines": 25,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__author__ = 'The OAuthlib Community'",
        "__version__ = '3.3.1'"
      ],
      "estimated_loc_savings": 18,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/pygments/__init__.py",
      "current_size_lines": 67,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__version__ = '2.19.2'",
        "__all__ = ['lex', 'format', 'highlight']"
      ],
      "estimated_loc_savings": 60,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/mako/__init__.py",
      "current_size_lines": 6,
      "has_imports": false,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__version__ = \"1.3.10\""
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/aiofiles/__init__.py",
      "current_size_lines": 21,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .threadpool import (",
        "from . import tempfile",
        "__all__ = ["
      ],
      "estimated_loc_savings": 13,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/pycparser/__init__.py",
      "current_size_lines": 74,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__all__ = ['c_lexer', 'c_parser', 'c_ast']",
        "__version__ = '2.22'",
        "from .c_parser import CParser"
      ],
      "estimated_loc_savings": 66,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/propcache/__init__.py",
      "current_size_lines": 21,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__version__ = \"0.3.2\"",
        "__all__ = ()",
        "    from .api import cached_property as cached_property  # noqa: F401",
        "    from .api import under_cached_property as under_cached_property  # noqa: F401",
        "        from . import api  # pylint: disable=import-outside-toplevel"
      ],
      "estimated_loc_savings": 11,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/kombu/__init__.py",
      "current_size_lines": 97,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__version__ = '5.5.4'",
        "__author__ = 'Ask Solem'",
        "    r'(\\d+)\\.(\\d+).(\\d+)(.+)?', __version__)).groups()",
        "        result = list(new_module.__all__)",
        "        result.extend(('__file__', '__path__', '__doc__', '__all__',",
        "                       '__package__', '__version__', '__author__',",
        "    '__all__': tuple(object_origins),",
        "    '__version__': __version__,",
        "    '__author__': __author__,",
        "    from .utils import debug"
      ],
      "estimated_loc_savings": 82,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/typer/__init__.py",
      "current_size_lines": 35,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__version__ = \"0.16.0\"",
        "from . import colors as colors",
        "from .main import Typer as Typer",
        "from .main import launch as launch",
        "from .main import run as run",
        "from .models import CallbackParam as CallbackParam",
        "from .models import Context as Context",
        "from .models import FileBinaryRead as FileBinaryRead",
        "from .models import FileBinaryWrite as FileBinaryWrite",
        "from .models import FileText as FileText",
        "from .models import FileTextWrite as FileTextWrite",
        "from .params import Argument as Argument",
        "from .params import Option as Option"
      ],
      "estimated_loc_savings": 17,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/rignore/__init__.py",
      "current_size_lines": 4,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .rignore import *",
        "if hasattr(rignore, \"__all__\"):",
        "    __all__ = rignore.__all__"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/asyncpg/__init__.py",
      "current_size_lines": 17,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .connection import connect, Connection  # NOQA",
        "from .exceptions import *  # NOQA",
        "from .pool import create_pool, Pool  # NOQA",
        "from .protocol import Record  # NOQA",
        "from .types import *  # NOQA",
        "from ._version import __version__  # NOQA",
        "from . import exceptions",
        "__all__: tuple[str, ...] = (",
        "__all__ += exceptions.__all__ # NOQA"
      ],
      "estimated_loc_savings": 3,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/redis/__init__.py",
      "current_size_lines": 81,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "    __version__ = metadata.version(\"redis\")",
        "    __version__ = \"99.99.99\"",
        "    VERSION = tuple(map(int_or_str, __version__.split(\".\")))",
        "__all__ = ["
      ],
      "estimated_loc_savings": 72,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/jinja2/__init__.py",
      "current_size_lines": 36,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "from .bccache import BytecodeCache as BytecodeCache",
        "from .bccache import FileSystemBytecodeCache as FileSystemBytecodeCache",
        "from .bccache import MemcachedBytecodeCache as MemcachedBytecodeCache",
        "from .environment import Environment as Environment",
        "from .environment import Template as Template",
        "from .exceptions import TemplateAssertionError as TemplateAssertionError",
        "from .exceptions import TemplateError as TemplateError",
        "from .exceptions import TemplateNotFound as TemplateNotFound",
        "from .exceptions import TemplateRuntimeError as TemplateRuntimeError",
        "from .exceptions import TemplatesNotFound as TemplatesNotFound",
        "from .exceptions import TemplateSyntaxError as TemplateSyntaxError",
        "from .exceptions import UndefinedError as UndefinedError",
        "from .loaders import BaseLoader as BaseLoader",
        "from .loaders import ChoiceLoader as ChoiceLoader",
        "from .loaders import DictLoader as DictLoader",
        "from .loaders import FileSystemLoader as FileSystemLoader",
        "from .loaders import FunctionLoader as FunctionLoader",
        "from .loaders import ModuleLoader as ModuleLoader",
        "from .loaders import PackageLoader as PackageLoader",
        "from .loaders import PrefixLoader as PrefixLoader",
        "from .runtime import ChainableUndefined as ChainableUndefined",
        "from .runtime import DebugUndefined as DebugUndefined",
        "from .runtime import make_logging_undefined as make_logging_undefined",
        "from .runtime import StrictUndefined as StrictUndefined",
        "from .runtime import Undefined as Undefined",
        "from .utils import clear_caches as clear_caches",
        "from .utils import is_undefined as is_undefined",
        "from .utils import pass_context as pass_context",
        "from .utils import pass_environment as pass_environment",
        "from .utils import pass_eval_context as pass_eval_context",
        "from .utils import select_autoescape as select_autoescape",
        "__version__ = \"3.1.6\""
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/cryptography/__init__.py",
      "current_size_lines": 21,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from cryptography.__about__ import __author__, __copyright__, __version__",
        "__all__ = [",
        "    \"__author__\",",
        "    \"__version__\","
      ],
      "estimated_loc_savings": 12,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/distro/__init__.py",
      "current_size_lines": 52,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .distro import (",
        "    __version__,",
        "__all__ = [",
        "__version__ = __version__"
      ],
      "estimated_loc_savings": 43,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/vine/__init__.py",
      "current_size_lines": 37,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .abstract import Thenable",
        "from .funtools import (",
        "from .promises import promise",
        "from .synchronization import barrier",
        "__version__ = '5.1.0'",
        "__author__ = 'Ask Solem'",
        "    r'(\\d+)\\.(\\d+).(\\d+)(.+)?', __version__).groups()",
        "__all__ = ["
      ],
      "estimated_loc_savings": 24,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/frozenlist/__init__.py",
      "current_size_lines": 62,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__version__ = \"1.7.0\"",
        "__all__ = (\"FrozenList\", \"PyFrozenList\")  # type: Tuple[str, ...]",
        "        from ._frozenlist import FrozenList as CFrozenList  # type: ignore"
      ],
      "estimated_loc_savings": 54,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/libtmux/__init__.py",
      "current_size_lines": 30,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .__about__ import (",
        "    __author__,",
        "    __email__,",
        "    __version__,",
        "from .pane import Pane",
        "from .server import Server",
        "from .session import Session",
        "from .window import Window",
        "__all__ = (",
        "    \"__author__\",",
        "    \"__email__\",",
        "    \"__version__\","
      ],
      "estimated_loc_savings": 13,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/bcrypt/__init__.py",
      "current_size_lines": 41,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from ._bcrypt import (",
        "    __author__,",
        "    __email__,",
        "from ._bcrypt import (",
        "    __version_ex__ as __version__,",
        "__all__ = [",
        "    \"__author__\",",
        "    \"__email__\",",
        "    \"__version__\","
      ],
      "estimated_loc_savings": 27,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/pgvector/__init__.py",
      "current_size_lines": 10,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .bit import Bit",
        "from .halfvec import HalfVector",
        "from .sparsevec import SparseVector",
        "from .vector import Vector",
        "__all__ = ["
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/fastapi_cloud_cli/__init__.py",
      "current_size_lines": 1,
      "has_imports": false,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__version__ = \"0.1.5\""
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/colorama/__init__.py",
      "current_size_lines": 5,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "from .initialise import init, deinit, reinit, colorama_text, just_fix_windows_console",
        "from .ansi import Fore, Back, Style, Cursor",
        "from .ansitowin32 import AnsiToWin32",
        "__version__ = '0.4.6'"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/cffi/__init__.py",
      "current_size_lines": 11,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__all__ = ['FFI', 'VerificationError', 'VerificationMissing', 'CDefError',",
        "from .api import FFI",
        "from .error import CDefError, FFIError, VerificationError, VerificationMissing",
        "from .error import PkgConfigError",
        "__version__ = \"1.17.1\""
      ],
      "estimated_loc_savings": 1,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/starlette/__init__.py",
      "current_size_lines": 1,
      "has_imports": false,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__version__ = \"0.47.2\""
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/tzdata/__init__.py",
      "current_size_lines": 5,
      "has_imports": false,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__version__ = \"2025.2\""
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/rsa/__init__.py",
      "current_size_lines": 52,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__author__ = \"Sybren Stuvel, Barry Mead and Yesudeep Mangalapilly\"",
        "__version__ = \"4.9.1\"",
        "__all__ = ["
      ],
      "estimated_loc_savings": 44,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/hiredis/__init__.py",
      "current_size_lines": 10,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from hiredis.version import __version__",
        "__all__ = [",
        "  \"__version__\"]"
      ],
      "estimated_loc_savings": 2,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/idna/__init__.py",
      "current_size_lines": 44,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .core import (",
        "from .intranges import intranges_contain",
        "from .package_data import __version__",
        "__all__ = [",
        "    \"__version__\","
      ],
      "estimated_loc_savings": 34,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/importlib_metadata/__init__.py",
      "current_size_lines": 946,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from . import _meta",
        "from ._collections import FreezableDefaultDict, Pair",
        "from ._compat import (",
        "from ._functools import method_cache, pass_none",
        "from ._itertools import always_iterable, bucket, unique_everseen",
        "from ._meta import PackageMetadata, SimplePath",
        "from ._typing import md_none",
        "from .compat import py39, py311",
        "__all__ = [",
        "        from . import _adapters"
      ],
      "estimated_loc_savings": 931,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sentry_sdk/__init__.py",
      "current_size_lines": 57,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "__all__ = [  # noqa"
      ],
      "estimated_loc_savings": 51,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/click/__init__.py",
      "current_size_lines": 73,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "from .core import Argument as Argument",
        "from .core import BaseCommand as BaseCommand",
        "from .core import Command as Command",
        "from .core import CommandCollection as CommandCollection",
        "from .core import Context as Context",
        "from .core import Group as Group",
        "from .core import MultiCommand as MultiCommand",
        "from .core import Option as Option",
        "from .core import Parameter as Parameter",
        "from .decorators import argument as argument",
        "from .decorators import command as command",
        "from .decorators import confirmation_option as confirmation_option",
        "from .decorators import group as group",
        "from .decorators import help_option as help_option",
        "from .decorators import HelpOption as HelpOption",
        "from .decorators import make_pass_decorator as make_pass_decorator",
        "from .decorators import option as option",
        "from .decorators import pass_context as pass_context",
        "from .decorators import pass_obj as pass_obj",
        "from .decorators import password_option as password_option",
        "from .decorators import version_option as version_option",
        "from .exceptions import Abort as Abort",
        "from .exceptions import BadArgumentUsage as BadArgumentUsage",
        "from .exceptions import BadOptionUsage as BadOptionUsage",
        "from .exceptions import BadParameter as BadParameter",
        "from .exceptions import ClickException as ClickException",
        "from .exceptions import FileError as FileError",
        "from .exceptions import MissingParameter as MissingParameter",
        "from .exceptions import NoSuchOption as NoSuchOption",
        "from .exceptions import UsageError as UsageError",
        "from .formatting import HelpFormatter as HelpFormatter",
        "from .formatting import wrap_text as wrap_text",
        "from .globals import get_current_context as get_current_context",
        "from .parser import OptionParser as OptionParser",
        "from .termui import clear as clear",
        "from .termui import confirm as confirm",
        "from .termui import echo_via_pager as echo_via_pager",
        "from .termui import edit as edit",
        "from .termui import getchar as getchar",
        "from .termui import launch as launch",
        "from .termui import pause as pause",
        "from .termui import progressbar as progressbar",
        "from .termui import prompt as prompt",
        "from .termui import secho as secho",
        "from .termui import style as style",
        "from .termui import unstyle as unstyle",
        "from .types import BOOL as BOOL",
        "from .types import Choice as Choice",
        "from .types import DateTime as DateTime",
        "from .types import File as File",
        "from .types import FLOAT as FLOAT",
        "from .types import FloatRange as FloatRange",
        "from .types import INT as INT",
        "from .types import IntRange as IntRange",
        "from .types import ParamType as ParamType",
        "from .types import Path as Path",
        "from .types import STRING as STRING",
        "from .types import Tuple as Tuple",
        "from .types import UNPROCESSED as UNPROCESSED",
        "from .types import UUID as UUID",
        "from .utils import echo as echo",
        "from .utils import format_filename as format_filename",
        "from .utils import get_app_dir as get_app_dir",
        "from .utils import get_binary_stream as get_binary_stream",
        "from .utils import get_text_stream as get_text_stream",
        "from .utils import open_file as open_file",
        "__version__ = \"8.1.8\""
      ],
      "estimated_loc_savings": 1,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/amqp/__init__.py",
      "current_size_lines": 68,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__version__ = '5.3.1'",
        "__author__ = 'Barry Pederson'",
        "    r'(\\d+)\\.(\\d+).(\\d+)(.+)?', __version__).groups()",
        "from .basic_message import Message  # noqa",
        "from .channel import Channel  # noqa",
        "from .connection import Connection  # noqa",
        "from .exceptions import (AccessRefused, AMQPError,  # noqa",
        "from .utils import promise  # noqa",
        "__all__ = ("
      ],
      "estimated_loc_savings": 54,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/zipp/__init__.py",
      "current_size_lines": 355,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from ._functools import save_method_args",
        "from .compat.py310 import text_encoding",
        "from .glob import Translator",
        "__all__ = ['Path']"
      ],
      "estimated_loc_savings": 346,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/websockets/__init__.py",
      "current_size_lines": 231,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .imports import lazy_import",
        "from .version import version as __version__  # noqa: F401",
        "__all__ = [",
        "    from .asyncio.client import ClientConnection, connect, unix_connect",
        "    from .asyncio.router import Router, route, unix_route",
        "    from .asyncio.server import (",
        "    from .client import ClientProtocol",
        "    from .datastructures import Headers, HeadersLike, MultipleValuesError",
        "    from .exceptions import (",
        "    from .frames import Close, CloseCode, Frame, Opcode",
        "    from .http11 import Request, Response",
        "    from .protocol import Protocol, Side, State",
        "    from .server import ServerProtocol",
        "    from .typing import ("
      ],
      "estimated_loc_savings": 212,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/pytz/__init__.py",
      "current_size_lines": 1436,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__version__ = VERSION",
        "__all__ = ["
      ],
      "estimated_loc_savings": 1429,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/jiter/__init__.py",
      "current_size_lines": 4,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .jiter import *",
        "if hasattr(jiter, \"__all__\"):",
        "    __all__ = jiter.__all__"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/gunicorn/__init__.py",
      "current_size_lines": 7,
      "has_imports": false,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__version__ = \".\".join([str(v) for v in version_info])",
        "SERVER_SOFTWARE = \"%s/%s\" % (SERVER, __version__)"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/sqlalchemy/__init__.py",
      "current_size_lines": 273,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "from . import util as _util",
        "from .engine import AdaptedConnection as AdaptedConnection",
        "from .engine import BaseRow as BaseRow",
        "from .engine import BindTyping as BindTyping",
        "from .engine import ChunkedIteratorResult as ChunkedIteratorResult",
        "from .engine import Compiled as Compiled",
        "from .engine import Connection as Connection",
        "from .engine import create_engine as create_engine",
        "from .engine import create_mock_engine as create_mock_engine",
        "from .engine import create_pool_from_url as create_pool_from_url",
        "from .engine import CreateEnginePlugin as CreateEnginePlugin",
        "from .engine import CursorResult as CursorResult",
        "from .engine import Dialect as Dialect",
        "from .engine import Engine as Engine",
        "from .engine import engine_from_config as engine_from_config",
        "from .engine import ExceptionContext as ExceptionContext",
        "from .engine import ExecutionContext as ExecutionContext",
        "from .engine import FrozenResult as FrozenResult",
        "from .engine import Inspector as Inspector",
        "from .engine import IteratorResult as IteratorResult",
        "from .engine import make_url as make_url",
        "from .engine import MappingResult as MappingResult",
        "from .engine import MergedResult as MergedResult",
        "from .engine import NestedTransaction as NestedTransaction",
        "from .engine import Result as Result",
        "from .engine import result_tuple as result_tuple",
        "from .engine import ResultProxy as ResultProxy",
        "from .engine import RootTransaction as RootTransaction",
        "from .engine import Row as Row",
        "from .engine import RowMapping as RowMapping",
        "from .engine import ScalarResult as ScalarResult",
        "from .engine import Transaction as Transaction",
        "from .engine import TwoPhaseTransaction as TwoPhaseTransaction",
        "from .engine import TypeCompiler as TypeCompiler",
        "from .engine import URL as URL",
        "from .inspection import inspect as inspect",
        "from .pool import AssertionPool as AssertionPool",
        "from .pool import AsyncAdaptedQueuePool as AsyncAdaptedQueuePool",
        "from .pool import (",
        "from .pool import NullPool as NullPool",
        "from .pool import Pool as Pool",
        "from .pool import PoolProxiedConnection as PoolProxiedConnection",
        "from .pool import PoolResetState as PoolResetState",
        "from .pool import QueuePool as QueuePool",
        "from .pool import SingletonThreadPool as SingletonThreadPool",
        "from .pool import StaticPool as StaticPool",
        "from .schema import BaseDDLElement as BaseDDLElement",
        "from .schema import BLANK_SCHEMA as BLANK_SCHEMA",
        "from .schema import CheckConstraint as CheckConstraint",
        "from .schema import Column as Column",
        "from .schema import ColumnDefault as ColumnDefault",
        "from .schema import Computed as Computed",
        "from .schema import Constraint as Constraint",
        "from .schema import DDL as DDL",
        "from .schema import DDLElement as DDLElement",
        "from .schema import DefaultClause as DefaultClause",
        "from .schema import ExecutableDDLElement as ExecutableDDLElement",
        "from .schema import FetchedValue as FetchedValue",
        "from .schema import ForeignKey as ForeignKey",
        "from .schema import ForeignKeyConstraint as ForeignKeyConstraint",
        "from .schema import Identity as Identity",
        "from .schema import Index as Index",
        "from .schema import insert_sentinel as insert_sentinel",
        "from .schema import MetaData as MetaData",
        "from .schema import PrimaryKeyConstraint as PrimaryKeyConstraint",
        "from .schema import Sequence as Sequence",
        "from .schema import Table as Table",
        "from .schema import UniqueConstraint as UniqueConstraint",
        "from .sql import ColumnExpressionArgument as ColumnExpressionArgument",
        "from .sql import NotNullable as NotNullable",
        "from .sql import Nullable as Nullable",
        "from .sql import SelectLabelStyle as SelectLabelStyle",
        "from .sql.expression import Alias as Alias",
        "from .sql.expression import alias as alias",
        "from .sql.expression import AliasedReturnsRows as AliasedReturnsRows",
        "from .sql.expression import all_ as all_",
        "from .sql.expression import and_ as and_",
        "from .sql.expression import any_ as any_",
        "from .sql.expression import asc as asc",
        "from .sql.expression import between as between",
        "from .sql.expression import BinaryExpression as BinaryExpression",
        "from .sql.expression import bindparam as bindparam",
        "from .sql.expression import BindParameter as BindParameter",
        "from .sql.expression import bitwise_not as bitwise_not",
        "from .sql.expression import BooleanClauseList as BooleanClauseList",
        "from .sql.expression import CacheKey as CacheKey",
        "from .sql.expression import Case as Case",
        "from .sql.expression import case as case",
        "from .sql.expression import Cast as Cast",
        "from .sql.expression import cast as cast",
        "from .sql.expression import ClauseElement as ClauseElement",
        "from .sql.expression import ClauseList as ClauseList",
        "from .sql.expression import collate as collate",
        "from .sql.expression import CollectionAggregate as CollectionAggregate",
        "from .sql.expression import column as column",
        "from .sql.expression import ColumnClause as ColumnClause",
        "from .sql.expression import ColumnCollection as ColumnCollection",
        "from .sql.expression import ColumnElement as ColumnElement",
        "from .sql.expression import ColumnOperators as ColumnOperators",
        "from .sql.expression import CompoundSelect as CompoundSelect",
        "from .sql.expression import CTE as CTE",
        "from .sql.expression import cte as cte",
        "from .sql.expression import custom_op as custom_op",
        "from .sql.expression import Delete as Delete",
        "from .sql.expression import delete as delete",
        "from .sql.expression import desc as desc",
        "from .sql.expression import distinct as distinct",
        "from .sql.expression import except_ as except_",
        "from .sql.expression import except_all as except_all",
        "from .sql.expression import Executable as Executable",
        "from .sql.expression import Exists as Exists",
        "from .sql.expression import exists as exists",
        "from .sql.expression import Extract as Extract",
        "from .sql.expression import extract as extract",
        "from .sql.expression import false as false",
        "from .sql.expression import False_ as False_",
        "from .sql.expression import FromClause as FromClause",
        "from .sql.expression import FromGrouping as FromGrouping",
        "from .sql.expression import func as func",
        "from .sql.expression import funcfilter as funcfilter",
        "from .sql.expression import Function as Function",
        "from .sql.expression import FunctionElement as FunctionElement",
        "from .sql.expression import FunctionFilter as FunctionFilter",
        "from .sql.expression import GenerativeSelect as GenerativeSelect",
        "from .sql.expression import Grouping as Grouping",
        "from .sql.expression import HasCTE as HasCTE",
        "from .sql.expression import HasPrefixes as HasPrefixes",
        "from .sql.expression import HasSuffixes as HasSuffixes",
        "from .sql.expression import Insert as Insert",
        "from .sql.expression import insert as insert",
        "from .sql.expression import intersect as intersect",
        "from .sql.expression import intersect_all as intersect_all",
        "from .sql.expression import Join as Join",
        "from .sql.expression import join as join",
        "from .sql.expression import Label as Label",
        "from .sql.expression import label as label",
        "from .sql.expression import LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT",
        "from .sql.expression import (",
        "from .sql.expression import LABEL_STYLE_NONE as LABEL_STYLE_NONE",
        "from .sql.expression import (",
        "from .sql.expression import lambda_stmt as lambda_stmt",
        "from .sql.expression import LambdaElement as LambdaElement",
        "from .sql.expression import Lateral as Lateral",
        "from .sql.expression import lateral as lateral",
        "from .sql.expression import literal as literal",
        "from .sql.expression import literal_column as literal_column",
        "from .sql.expression import modifier as modifier",
        "from .sql.expression import not_ as not_",
        "from .sql.expression import Null as Null",
        "from .sql.expression import null as null",
        "from .sql.expression import nulls_first as nulls_first",
        "from .sql.expression import nulls_last as nulls_last",
        "from .sql.expression import nullsfirst as nullsfirst",
        "from .sql.expression import nullslast as nullslast",
        "from .sql.expression import Operators as Operators",
        "from .sql.expression import or_ as or_",
        "from .sql.expression import outerjoin as outerjoin",
        "from .sql.expression import outparam as outparam",
        "from .sql.expression import Over as Over",
        "from .sql.expression import over as over",
        "from .sql.expression import quoted_name as quoted_name",
        "from .sql.expression import ReleaseSavepointClause as ReleaseSavepointClause",
        "from .sql.expression import ReturnsRows as ReturnsRows",
        "from .sql.expression import (",
        "from .sql.expression import SavepointClause as SavepointClause",
        "from .sql.expression import ScalarSelect as ScalarSelect",
        "from .sql.expression import Select as Select",
        "from .sql.expression import select as select",
        "from .sql.expression import Selectable as Selectable",
        "from .sql.expression import SelectBase as SelectBase",
        "from .sql.expression import SQLColumnExpression as SQLColumnExpression",
        "from .sql.expression import StatementLambdaElement as StatementLambdaElement",
        "from .sql.expression import Subquery as Subquery",
        "from .sql.expression import table as table",
        "from .sql.expression import TableClause as TableClause",
        "from .sql.expression import TableSample as TableSample",
        "from .sql.expression import tablesample as tablesample",
        "from .sql.expression import TableValuedAlias as TableValuedAlias",
        "from .sql.expression import text as text",
        "from .sql.expression import TextAsFrom as TextAsFrom",
        "from .sql.expression import TextClause as TextClause",
        "from .sql.expression import TextualSelect as TextualSelect",
        "from .sql.expression import true as true",
        "from .sql.expression import True_ as True_",
        "from .sql.expression import try_cast as try_cast",
        "from .sql.expression import TryCast as TryCast",
        "from .sql.expression import Tuple as Tuple",
        "from .sql.expression import tuple_ as tuple_",
        "from .sql.expression import type_coerce as type_coerce",
        "from .sql.expression import TypeClause as TypeClause",
        "from .sql.expression import TypeCoerce as TypeCoerce",
        "from .sql.expression import UnaryExpression as UnaryExpression",
        "from .sql.expression import union as union",
        "from .sql.expression import union_all as union_all",
        "from .sql.expression import Update as Update",
        "from .sql.expression import update as update",
        "from .sql.expression import UpdateBase as UpdateBase",
        "from .sql.expression import Values as Values",
        "from .sql.expression import values as values",
        "from .sql.expression import ValuesBase as ValuesBase",
        "from .sql.expression import Visitable as Visitable",
        "from .sql.expression import within_group as within_group",
        "from .sql.expression import WithinGroup as WithinGroup",
        "from .types import ARRAY as ARRAY",
        "from .types import BIGINT as BIGINT",
        "from .types import BigInteger as BigInteger",
        "from .types import BINARY as BINARY",
        "from .types import BLOB as BLOB",
        "from .types import BOOLEAN as BOOLEAN",
        "from .types import Boolean as Boolean",
        "from .types import CHAR as CHAR",
        "from .types import CLOB as CLOB",
        "from .types import DATE as DATE",
        "from .types import Date as Date",
        "from .types import DATETIME as DATETIME",
        "from .types import DateTime as DateTime",
        "from .types import DECIMAL as DECIMAL",
        "from .types import DOUBLE as DOUBLE",
        "from .types import Double as Double",
        "from .types import DOUBLE_PRECISION as DOUBLE_PRECISION",
        "from .types import Enum as Enum",
        "from .types import FLOAT as FLOAT",
        "from .types import Float as Float",
        "from .types import INT as INT",
        "from .types import INTEGER as INTEGER",
        "from .types import Integer as Integer",
        "from .types import Interval as Interval",
        "from .types import JSON as JSON",
        "from .types import LargeBinary as LargeBinary",
        "from .types import NCHAR as NCHAR",
        "from .types import NUMERIC as NUMERIC",
        "from .types import Numeric as Numeric",
        "from .types import NVARCHAR as NVARCHAR",
        "from .types import PickleType as PickleType",
        "from .types import REAL as REAL",
        "from .types import SMALLINT as SMALLINT",
        "from .types import SmallInteger as SmallInteger",
        "from .types import String as String",
        "from .types import TEXT as TEXT",
        "from .types import Text as Text",
        "from .types import TIME as TIME",
        "from .types import Time as Time",
        "from .types import TIMESTAMP as TIMESTAMP",
        "from .types import TupleType as TupleType",
        "from .types import TypeDecorator as TypeDecorator",
        "from .types import Unicode as Unicode",
        "from .types import UnicodeText as UnicodeText",
        "from .types import UUID as UUID",
        "from .types import Uuid as Uuid",
        "from .types import VARBINARY as VARBINARY",
        "from .types import VARCHAR as VARCHAR",
        "__version__ = \"2.0.43\"",
        "    from . import exc",
        "    exc._version_token = \"\".join(__version__.split(\".\")[0:2])"
      ],
      "estimated_loc_savings": 14,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/shellingham/__init__.py",
      "current_size_lines": 19,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "from ._core import ShellDetectionFailure",
        "__version__ = \"1.5.4\""
      ],
      "estimated_loc_savings": 12,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/regex/__init__.py",
      "current_size_lines": 3,
      "has_imports": true,
      "has_version": false,
      "has_all": true,
      "preserved_content": [
        "from .regex import *",
        "from . import regex",
        "__all__ = regex.__all__"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/bandit/__init__.py",
      "current_size_lines": 18,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__author__ = metadata.metadata(\"bandit\")[\"Author\"]",
        "__version__ = metadata.version(\"bandit\")"
      ],
      "estimated_loc_savings": 11,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/numpy/__init__.py",
      "current_size_lines": 871,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "__version__",
        "from . import version",
        "from ._expired_attrs_2_0 import __expired_attributes__",
        "from ._globals import _CopyMode, _NoValue",
        "from .version import __version__",
        "    from . import _distributor_init",
        "    from . import _core",
        "    from ._core import (",
        "    from . import lib",
        "    from . import matrixlib as _mat",
        "    from .lib import scimath as emath",
        "    from .lib._arraypad_impl import pad",
        "    from .lib._arraysetops_impl import (",
        "    from .lib._function_base_impl import (",
        "    from .lib._histograms_impl import histogram, histogram_bin_edges, histogramdd",
        "    from .lib._index_tricks_impl import (",
        "    from .lib._nanfunctions_impl import (",
        "    from .lib._npyio_impl import (",
        "    from .lib._polynomial_impl import (",
        "    from .lib._shape_base_impl import (",
        "    from .lib._stride_tricks_impl import (",
        "    from .lib._twodim_base_impl import (",
        "    from .lib._type_check_impl import (",
        "    from .lib._ufunclike_impl import fix, isneginf, isposinf",
        "    from .lib._utils_impl import get_include, info, show_runtime",
        "    from .matrixlib import asmatrix, bmat, matrix",
        "    from ._array_api_info import __array_namespace_info__",
        "    __all__ = list(",
        "        set(_core.__all__) |",
        "        set(_mat.__all__) |",
        "        set(lib._histograms_impl.__all__) |",
        "        set(lib._nanfunctions_impl.__all__) |",
        "        set(lib._function_base_impl.__all__) |",
        "        set(lib._twodim_base_impl.__all__) |",
        "        set(lib._shape_base_impl.__all__) |",
        "        set(lib._type_check_impl.__all__) |",
        "        set(lib._arraysetops_impl.__all__) |",
        "        set(lib._ufunclike_impl.__all__) |",
        "        set(lib._arraypad_impl.__all__) |",
        "        set(lib._utils_impl.__all__) |",
        "        set(lib._stride_tricks_impl.__all__) |",
        "        set(lib._polynomial_impl.__all__) |",
        "        set(lib._npyio_impl.__all__) |",
        "        set(lib._index_tricks_impl.__all__) |",
        "        {\"emath\", \"show_config\", \"__version__\", \"__array_namespace_info__\"}",
        "        from . import exceptions"
      ],
      "estimated_loc_savings": 820,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/jose/__init__.py",
      "current_size_lines": 8,
      "has_imports": true,
      "has_version": true,
      "has_all": false,
      "preserved_content": [
        "__version__ = \"3.5.0\"",
        "__author__ = \"Michael Davis\"",
        "from .exceptions import ExpiredSignatureError  # noqa: F401",
        "from .exceptions import JOSEError  # noqa: F401",
        "from .exceptions import JWSError  # noqa: F401",
        "from .exceptions import JWTError  # noqa: F401"
      ],
      "estimated_loc_savings": 0,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/charset_normalizer/__init__.py",
      "current_size_lines": 40,
      "has_imports": true,
      "has_version": true,
      "has_all": true,
      "preserved_content": [
        "from .api import from_bytes, from_fp, from_path, is_binary",
        "from .legacy import detect",
        "from .models import CharsetMatch, CharsetMatches",
        "from .utils import set_logging_handler",
        "from .version import VERSION, __version__",
        "__all__ = (",
        "    \"__version__\","
      ],
      "estimated_loc_savings": 28,
      "requires_standardization": true
    },
    {
      "file_path": "/Users/bogdan/work/leanvibe-dev/bee-hive/.venv/lib/python3.13/site-packages/qrcode/__init__.py",
      "current_size_lines": 22,
      "has_imports": true,
      "has_version": false,
      "has_all": false,
      "preserved_content": [],
      "estimated_loc_savings": 17,
      "requires_standardization": true
    }
  ],
  "estimated_loc_savings": 5850,
  "file_count": 50
}